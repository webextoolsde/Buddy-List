/* Modified by Rue Green 08/09/2022 ------>
    Updated code to add buttons for calling, consultative transfer and blind transfer.  Also added
    Properties to the Desktop Layout JSON file (addressbook-widget.json in project) to support passing in the users
    OutDial EP ID and 3 real names, phone numbers and email address for the first three cards in the address book.  This
    allows the user to setup three real contacts in the address book for demo.  I also increased the size of the total
    dummy contacts generated by the API to 2000 so we can show customers how to exceed the current limitation of the
    WxCC phonebook of 150 records.
 */

    import { Desktop } from '@wxcc-desktop/sdk';
    import { render } from 'lit';
    
    customElements.define(
      'sa-address-book',
      class extends HTMLElement {
        constructor() {
          super();
          this.attachShadow({ mode: 'open' });
          const font = document.createElement('link');
          font.href =
            'https://fonts.googleapis.com/css2?family=Cutive+Mono&family=Darker+Grotesque:wght@300&family=Poppins:wght@200;400&display=swap';
          font.rel = 'stylesheet';
    
          const momen = document.createElement('link');
          font.momen =
            '@momentum-design/tokens/dist/css/components/complete.css';
          font.momen = 'stylesheet';
    
          document.head.appendChild(font);
    
        }
        // Function for making outDial call
        async makeCall(destination) {
          // the phone number from the contact cards
          console.log("Destination" +destination);
          if(destination.length >6){
              destination = "%2B"+destination;
          }
          
    
          console.log("Destination" +destination);
          //This is passed in via a prop in the Desktop Layout JSON file
          let myOutdialEPID = this.myOutdialEPID;
          try {
             await Desktop.dialer.startOutdial({
              data: {
                // your outDial entrypoint ID from Portal,
                entryPointId: myOutdialEPID,
                destination,
                direction: 'OUTBOUND',
                attributes: {},
                mediaType: 'telephony',
                outboundType: 'OUTDIAL',
              },
            });
    
            
            
    
          } catch (error) {
            console.log(error);
          }


          var URL = "https://webexapis.com/v1/people/me";
          const response00 = await fetch(URL, {
            headers: {Authorization: 'Bearer '+this.token}
          });
          const userstatus00 = await response00.json();
          const ciuser = userstatus00.id;
/*
          var URL = "https://webexapis.com/v1/telephony/config/people/"+ciuser +"/preferredAnswerEndpoint";
          const response0 = await fetch(URL, {
            headers: {Authorization: 'Bearer '+this.token}
          });
          const userstatus0 = await response0.json();
          const device = "";
          for (let i = userstatus0.endpoints.length - 1; i > -1; i--) {
              if(userstatus0.endpoints[0].type === "APPLICATION"){
                device = userstatus0.endpoints[0].id;
              }
          }
*/
          var URL = "https://webexapis.com/v1/telephony/calls";
            const response1 = await fetch(URL, {
              headers: {Authorization: 'Bearer '+this.token}
            });
            const opencalls = await response1.json();
            const opencallid = opencalls.items[0].id;
            console.log("CallID:" +opencallid);
    
            var URL = "https://webexapis.com/v1/telephony/calls/answer";
            const response11 = await fetch(URL, {
              method: 'POST',
              headers: {Authorization: 'Bearer '+this.token, 'Content-Type': 'application/json'},
              body: JSON.stringify({callId: opencallid})
            });
            const userstatus1 = await response11.json();
            console.log(userstatus1);
        }
    
        static get observedAttributes() {
          return ['loading'];
        }
        get loading() {
          return JSON.parse(this.getAttribute('loading'));
        }
        set loading(v) {
          this.setAttribute('loading', JSON.stringify(v));
        }
    
        get webexci() {
          return JSON.parse(this.getAttribute('webexci'));
        }
        set webexci(v) {
          this.setAttribute('webexci', JSON.stringify(v));
        }
    
    
        // using free API
        async fetchAPI() {
          this.loading = true;
          var begin = Date.now()-5600000;
          console.log(begin);
          console.log("Date now:" +Date.now());
          var end = Date.now()-3600000;
          console.log(end);
        
          var url = "https://api.wxcc-"+this.region+".cisco.com/v1/agents/activities?teamIds="+this.teamId+"&channelTypes=telephony&from="+end;
          const response = await fetch(url, {
            headers: {Authorization: 'Bearer '+this.token}
          });
          const json = await response.json();
          for (let i = json.data.length - 1; i > -1; i--) {
            console.log("USer "+json.data[i].agentName +" " +json.data[i].active);
            console.log("USer DN "+json.data[i].agentDn);
            if(json.data[i].agentDn.startsWith("webrtc")){
              json.data[i].agentDn = "WebRTC";
            }
            if (json.data[i].active === false) {
              json.data.splice(i, 1);
              console.log("USer removed");
            }
          }
    
          for (let i = json.data.length - 1; i > -1; i--) {
            
            var URL = "https://webexapis.com/v1/people?email="+json.data[i].agentLogin;
            const response = await fetch(URL, {
              headers: {Authorization: 'Bearer '+this.token}
            });
            const userstatus = await response.json();
            json.data[i].webexstatus = userstatus.items[0].status;
            json.data[i].avatar = userstatus.items[0].avatar;
            console.log("Webex Status: " +json.data[i].webexstatus);
            console.log("CC Status: " +json.data[i].currentState);
            console.log("CC Code: " +json.data[i].idleCodeName);
            if(json.data[i].webexstatus === "active"){
              json.data[i].cardwebex = "color:green;";
            }else if(json.data[i].webexstatus === "undefined"){
              json.data[i].cardwebex = "color:grey;";
            }else if(json.data[i].webexstatus === "DoNotDisturb"){
              json.data[i].cardwebex = "color:red;";
            }
            if(json.data[i].currentState === "idle"){
              json.data[i].card = "card-grey";
            }else if(json.data[i].currentState === "available"){
              json.data[i].card = "card-green";
            }else if(json.data[i].currentState === "wrapup"){
              json.data[i].card = "card-orange";
            }else if(json.data[i].currentState === "connected"){
              json.data[i].card = "card-orange";
            }else if(json.data[i].currentState === "ringing"){
              json.data[i].card = "card-orange";
            }
    
            if(json.data[i].currentState === "idle"){
              json.data[i].idleCodeName = json.data[i].idleCodeName;
            }else{
              json.data[i].idleCodeName = json.data[i].currentState;
            }
            if(json.data[i].agentDn.startsWith("+49")){
              json.data[i].agentDndial = json.data[i].agentDn.replace("+49","00");
            }
          }
    
    
          this.users = json;
          console.log("JSON Log: "+json);
          this.loading = false;
        }
        // Free APi with pulling down 100 users. Replace this line with YOUR-ADDRESS-BOOK-API
        // The API requires an object with phone,email,name.first.
        async connectedCallback() {
          Desktop.config.init();
          await this.fetchAPI();
          await this.click2call();
          await this.click2callRealNum();
          //await this.searchInput();
          //Install all the listeners for every button on all address cards!
          await this.callingEventListeners();
    
          await this.refreshsite();
        }
          // Get interactionID, but more info can be obtained from this method
          // This is used to parse the key value pair, filter Fetched: in
          // console log and cut/paste to jsonformatter.org and its parser will
          // display the json tree
          async getInfo() {
              console.log('Getting Task Information..');
              const currentTaskMap = await Desktop.actions.getTaskMap();
              console.log('Fetched: ' + JSON.stringify(currentTaskMap));
              currentTaskMap.forEach (function(value, key) {
                  console.log("key: " + key + " Value: " + value);
                  console.log("Value: " + value.interaction.mediaType);
                  if(value.interaction.mediaType == "telephony") {
                      console.log("Value of interId: " + value.interactionId);
                      return value;
                  }
              })
          }


          async callingEventListeners(){
            /* Lets get the interaction Id for telephony and use it for transferring
               and consulting. Placed it inline so we could get the string and not the object that is returned
               from getInfo().  You could call get info and walk the object value.interactionId if you want to
               remove the code below.  Install unique event listeners for every card and every button by walking the list
               of button elements in the shadow DOM, checking what type of button it is, using its value set in the HTML
               in render() and install event handler to switch() based on the type of button it is.
             */
               console.log("Event Listen start: ");
            let interId = "";
            let agentId = "";
            let phone = "";
            let destination = "";
            let mediaId = "";
            let myOutdialEPID = this.myOutdialEPID;
            const currentTaskMap = await Desktop.actions.getTaskMap();
            currentTaskMap.forEach (function(value, key) {
    
              console.log("Task start: ");
                if (value.interaction.mediaType == "telephony") {
    
              console.log("Task ID: " +value.interactionId);
                    interId = value.interactionId;
                    agentId = value.agentId;
                    mediaId = value.mediaResourceId;
                }
            })
            let btns = this.shadowRoot.querySelectorAll('.button');
            console.log("Button Search  Listen: "+btns);
            for (const element of btns) {
              console.log("Event Listen: "+element);
                element.addEventListener("click", function () {
                    switch(element.id){
                        case "btnTransfer":
                            phone = element.value;
                            destination = phone.replace(/[\W_]/g, '');
                            try {
                                Desktop.agentContact.blindTransfer({
                                    interactionId: interId,
                                    data: {
                                        agentId: agentId,
                                        destAgentId: destination,
                                        mediaType: 'telephony',
                                        destinationType: "DN",
                                        mediaResourceId: mediaId
                                    }
                                });
                                } catch (error) {
                                    console.log(error);
                                }
                            break;
                        case "btnConsult":
                            phone = element.value;
                            destination = phone.replace(/[\W_]/g, '');
                            try {
                                Desktop.agentContact.consult({
                                    interactionId: interId,
                                    data: {
                                        agentId: agentId,
                                        destAgentId: destination,
                                        mediaType: 'telephony',
                                        destinationType: "DN"
                                    },
                                    url: 'consult'
                                });
                            } catch (error) {
                                console.log(error);
                            }
                            break;
                        case "btnConference":
                            phone = element.value;
                            destination = phone.replace(/[\W_]/g, '');
                            try {
                                Desktop.agentContact.consultConference({
                                    interactionId: interId,
                                    data: {
                                        agentId: agentId,
                                        destAgentId: destination,
                                        mediaType: 'telephony',
                                        destinationType: "DN",
                                        mediaResourceId: mediaId
                                    }
                                });
                            } catch (error) {
                                console.log(error);
                            }
                            break;
                        case "btnCall":
                            phone = element.value;
                            destination = phone.replace(/[\W_]/g, '');
                            console.log("start outdial Call: " +destination);
                            try {
                                Desktop.dialer.startOutdial({
                                    data: {
                                        // your outDial entrypoint ID from Portal
                                        entryPointId: myOutdialEPID,
                                        destination,
                                        direction: 'OUTBOUND',
                                        attributes: {},
                                        mediaType: 'telephony',
                                        outboundType: 'OUTDIAL',
                                    },
                                });
                            } catch (error) {
                                console.log(error);
                            }
                            break;
                            case "btnRefresh":
                              this.connectedCallback();
                              break;
                    }
                });
            }
        }
        disconnectedCallback() {;
        }
        attributeChangedCallback(attrName, oldVal, newVal) {
          this.render();
        }
    
        // Listen for click on the phone number used to call your working number...
        async click2callRealNum() {
          this.shadowRoot.querySelector('.phone').addEventListener('click', (e) => {
            let phone = e.target.textContent;
            let destination = phone.replace(/[\W_]/g, '');
            console.log(destination);
            this.makeCall(destination);
          });
        }
    
        async refreshsite() {
          let mainCard = this.shadowRoot.querySelector(
            '[data-main-card]'
          );
          mainCard.addEventListener('click', (e) => {
            console.log("Refresh Button clikced");
            console.log("button click " +e.target.classList);
            const selectPhone = e.target.classList.contains('button-refresh');
            console.log("button click : " +selectPhone);
            if (!selectPhone) {
              return;
            } else {
    
              console.log("Site Refresh");
              this.connectedCallback();
            }
            
          });
        }
    
        // Listen for click on the phone number event
        async click2call() {
          let mainCard = this.shadowRoot.querySelector(
            '[data-user-cards-container]'
          );
          mainCard.addEventListener('click', (e) => {
            console.log("Call Phone: " +e.target.classList);
            const selectPhone = e.target.classList.contains('phone');
            console.log("Call Phone: " +selectPhone);
            if (!selectPhone) {
              return;
            } else {
              let phone = e.target.textContent;
              console.log("Call Phone: " +phone);
              let destination = phone.replace(/[\W_]/g, '');
              this.makeCall(destination);
            }
          });
        }
    
        // Search Bar
        async searchInput() {
          const userCardTemplate = this.shadowRoot.querySelector(
            '[data-user-template]'
          );
          const userCardContainer = this.shadowRoot.querySelector(
            //'[data-user-cards-container]'
            '[data-user-cards-container]'
          );
          const searchInput = this.shadowRoot.querySelector('[data-search]');
    
          // Modify these lines based on how the data is returned from your API.
          // This is a simple example of using name,email and phone to build a contact card.
          let users = this.users.data.map((user) => {
            const card = userCardTemplate.content.cloneNode(true).children[0];
            const header = card.querySelector('[data-header]');
            const email = card.querySelector('[data-email]');
            const phone = card.querySelector('[data-phone]');
            header.textContent = user.agentName;
            email.textContent = user.agentLogin;
            phone.textContent = user.agentDn;
            //userCardContainer.append(card);
            userCardContainer.append(card);
            console.log("input" +user.agentName);
            return {
              name: user.agentName,
              email: user.agentLogin,
              phone: user.agentDn,
              element: card,
            };
          });
          searchInput.addEventListener('input', function (e) {
            console.log("input" +e.target.value.toLowerCase());
            const value = e.target.value.toLowerCase();
            users.forEach((user) => {
              const isVisible = user.agentName.toLowerCase().includes(value);
              console.log(isVisible);
              user.element.classList.toggle('hide', !isVisible);
            });
          });
        }
    
        // Render contacts on webpage
        render() {
          if (this.loading) {
            this.shadowRoot.innerHTML = `Loading...`;
          } else {
            this.shadowRoot.innerHTML = `
            <style>
            .container{
              overflow: var(--flow, scroll);
              font-family: 'Poppins', sans-serif;
            }
           
            .search-wrapper {
              width:30%;
              display: flex;
              flex-direction: column;
              gap: 0.25rem;
              margin-top: 60px
            }
    
            h3{
              display: flex;
              flex-direction: column;
              background: red;
            }
            
            input {
              font-size: 1rem;
              margin-bottom: 2rem;
              padding: .5rem;
              border-radius: 20px;
              border:1px solid 
            }
            
            .user-cards {
              display: grid;
              grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
              gap: 0.95rem;
              margin-top: 1rem;
            }
            
            .card {
              border: 1px solid black;
              background-color: white;
              padding: 0.5rem;
              border-radius: 8px;
              border-right: 10px solid #A12512;
              box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
              overflow: scroll;
            }
    
            .card-red {
              border: 1px solid black;
              background-color: white;
              padding: 0.5rem;
              border-radius: 8px;
              border-right: 10px solid #e54f3c;
              border-top: 10px solid #e54f3c;
              border-left: 10px solid #e54f3c;
              border-bottom: 10px solid #e54f3c;
              box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
              overflow: scroll;
            }
    
            .card-green {
              border: 1px solid black;
              background-color: white;
              padding: 0.5rem;
              border-radius: 8px;
              border-right: 10px solid #75e879;
              border-top: 10px solid #75e879;
              border-left: 10px solid #75e879;
              border-bottom: 10px solid #75e879;
              box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
              overflow: scroll;
            }
    
    
            .card-orange {
              border: 1px solid black;
              background-color: white;
              padding: 0.5rem;
              border-radius: 8px;
              border-right: 10px solid #f47545;
              border-top: 10px solid #f47545;
              border-left: 10px solid #f47545;
              border-bottom: 10px solid #f47545;
              box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
              overflow: scroll;
            }
    
            .card-grey {
              border: 1px solid black;
              background-color: white;
              padding: 0.5rem;
              border-radius: 8px;
              border-right: 10px solid #64676c;
              border-top: 10px solid #64676c;
              border-left: 10px solid #64676c;
              border-bottom: 10px solid #64676c;
              box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
              overflow: scroll;
            }
            .card-red > .header {
              margin-bottom: 0.25rem;
              font-weight: bold;
            }
            
            .card-red > .email {
              font-size: 0.8rem;
              color: #777;
              margin-bottom: 0.25rem;
            }
            .card-red > .phone {
              color: #005e7d;
              cursor: pointer;
            }
            .card-orange > .header {
              margin-bottom: 0.25rem;
              font-weight: bold;
            }
            
            .card-orange > .email {
              font-size: 0.8rem;
              color: #777;
              margin-bottom: 0.25rem;
            }
            .card-orange > .phone {
              color: #005e7d;
              cursor: pointer;
            }
            .card-green > .header {
              margin-bottom: 0.25rem;
              font-weight: bold;
            }
            
            .card-green > .email {
              font-size: 0.8rem;
              color: #777;
              margin-bottom: 0.25rem;
            }
            .card-green > .phone {
              color: #005e7d;
              cursor: pointer;
            }
            .card-green > .header {
              margin-bottom: 0.25rem;
              font-weight: bold;
            }
    
            .card-grey > .header {
              margin-bottom: 0.25rem;
              font-weight: bold;
            }
            
            .card-grey > .email {
              font-size: 0.8rem;
              color: #777;
              margin-bottom: 0.25rem;
            }
            .card-grey > .phone {
              color: #005e7d;
              cursor: pointer;
            }
            .card > .header {
              margin-bottom: 0.25rem;
              font-weight: bold;
            }
            
            .card > .email {
              font-size: 0.8rem;
              color: #777;
              margin-bottom: 0.25rem;
            }
            .card > .phone {
              color: #005e7d;
              cursor: pointer;
            }
            .button  {
            display: inline-block;
            background-color: #183fcd;
            border-radius: 10px;
            border: 4px double #cccccc;
            color: #eeeeee;
            text-align: center;
            font-size: 8px;
            padding: 5px;
            width: 45px;
            -webkit-transition: all 0.5s;
            -moz-transition: all 0.5s;
            -o-transition: all 0.5s;
            transition: all 0.5s;
            cursor: pointer;
            margin: 5px;
          }
          
    
            ::placeholder{
              text-indent: 8px;
              color: gray;
              font-family: 'Darker Grotesque', sans-serif;
            }
    
            input:focus {
              outline: none !important;
              border:1px solid #005e7d;
              box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
              opacity: .8;
            }
            .navbar {
              background-color: #064157;
              color: white;
              text-align: center;
              width: 100%;
              padding: 5px 0;
              border-radius: 8px;
              font-family: 'Cutive Mono', monospace;
              font-size: 30px;
            }
           
            span.title {
              font-size: .9rem;
            }
            .search {
              margin-left: 14px;
            }
            
            .hide {
              display: none;
            }
            </style>
    
           <div class="container">
                  <div class="navbar"><slot name="title">${this.title}</slot>
                  <span class="title"><p>${this.titletext}</p></span>
                  </div>
                  <div class="navbar" data-main-card>
                  <button type="button" id="btnRefresh" class="button-refresh" id="button-refresh"value="">Refresh</button>
                  </div>
                  
                  
    
                <div class="user-cards" data-user-cards-container>
                  
                  
                  
                  
                    ${this.users.data
                .map((user) => {
                  console.log("User HTML: "+user.agentName +" "+user.card+" "+user.webexstatus+" "+user.avatar+" "+user.cardwebex);
                    return `
                            
                              <div class="${user.card}">
                                <div>
                                <md-avatar alt="${user.agentName}" title="${user.agentName}" type="${user.webexstatus}" src="${user.avatar}" hide defaulttooltip="false" size="36" style="--avatar-cursor: default;"></md-avatar>
                                <div class="header" style="${user.cardwebex}" data-header>${user.agentName} (${user.webexstatus})</div>
                                </div>
                                <div class="email" data-email>${user.agentLogin}</div>
                                <div class="email" data-email>Agent Code: ${user.idleCodeName}</div>
                                <div class="phone" data-phone>${user.agentDn}</div>
                                <button type="button" id="btnConsult" class="button" value="${user.agentDndial}">Consult</button>
                                
                                <button type="button" id="btnTransfer" class="button" value="${user.agentDndial}">Transfer</button>
                                
                              </div>
                               
                          `;
                  
                    
                })
                .join('')}
              </div>
                       `;
          }
        }
      }
    );
    