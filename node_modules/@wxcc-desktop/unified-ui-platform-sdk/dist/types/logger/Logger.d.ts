export declare namespace Logger {
    const MAX_LOGS_SIZE = 1048576;
    const LS_LOGS_KEY = "uuip-client-logs";
    enum Level {
        Trace = 1,
        Debug = 2,
        Warn = 3,
        Error = 4,
        Fatal = 5
    }
    type LogRecord = {
        pfx: string;
        msgs: string[];
        ts: number;
        lvl: Level;
    };
    namespace ServiceMeta {
        type Listeners = {
            add: (logRecord: LogRecord) => void;
        };
        type Events = keyof Listeners;
    }
    class Service {
        readonly prefix: string;
        private loggerEmitter;
        constructor(prefix: string);
        private log;
        info(...args: any[]): void;
        debug(...args: any[]): void;
        warn(...args: any[]): void;
        error(...args: any[]): void;
        private emit;
        addEventListener<T extends ServiceMeta.Events>(eventName: T, listener: ServiceMeta.Listeners[T]): () => void;
        removeEventListener<T extends ServiceMeta.Events>(eventName: T, listener: ServiceMeta.Listeners[T]): void;
    }
    class ServicesPool {
        private loggers;
        private logsCollection;
        private logsCollectionString;
        readonly prefixedLogsCollections: Record<string, Set<LogRecord>>;
        private logRecordsSerializedLength;
        constructor();
        private static getSerializedJsonLogRecordBytesSize;
        private get serializedJsonLogsBytesSize();
        private save;
        private restore;
        private getLogObjectFromString;
        private restorePreFixedLogs;
        private addPreFixedLogs;
        private removeOversized;
        private removeTextFromString;
        private addLogRecord;
        private removeLogRecord;
        private removePreFixedLogs;
        private onLoggerAddRecord;
        private static getLogRecordReadable;
        private static getLogsReadableJson;
        private static getLogsReadableText;
        private static getLogsUrl;
        private static browserDownload;
        addLogger(logger: Service): void;
        /**
         * e.g. for some all services in chronological order
         * [{ ... }, { ... }, ... ]
         */
        getAllLogsJsonUrl(): string;
        /**
         * e.g.
         * {
         *   'AgentX': [{ ... }, { ... }, ... ],
         *   'agentx-mfe-wc-based': [{ ... }, { ... }, ... ]
         * }
         */
        getAllPrefixedLogsJsonUrl(): string;
        /**
         * e.g. for some service 'prefix' in chronological order
         * [{ ... }, { ... }, ... ]
         */
        getPrefixedLogsJsonUrl(prefix: string): string;
        /**
         * e.g. for some all services in chronological order
         * [SERVICE]: ..., [MESSAGES]: ...,
         * [SERVICE]: ..., [MESSAGES]: ...,
         */
        getAllLogsTextUrl(): string;
        getPrefixedLogsTextUrl(prefix: string): string;
        browserDownloadAllLogsJson(): void;
        browserDownloadAllPrefixedLogsJson(): void;
        browserDownloadPrefixedLogsJson(prefix: string): void;
        browserDownloadAllLogsText(): void;
        browserDownloadPrefixedLogsText(prefix: string): void;
        cleanupAllLogs(): void;
        cleanupPrefixedLogs(prefix: string): void;
        getAllPrefixedLogsCollections(): Record<string, LogRecord[]>;
        getPrefixedLogsCollection(prefix: string): LogRecord[];
    }
    const POOL: ServicesPool;
}
export declare function createLogger(prefix: string): Logger.Service;
