import { cacheKeys, eventConstants, propsConstants } from "../mixpanel/constants";
import { trackingUtils } from "../mixpanel/mix-panel-tracking";
import { PrometheusConstant } from "../prometheus/constants";
declare const SERVICE_PROVIDERS: () => {
    mixpanel: string;
    prometheus: string;
};
export declare class TelemetryService {
    MIX_EVENT: ReturnType<typeof eventConstants>;
    MIX_PROPS: ReturnType<typeof propsConstants>;
    MIX_CACHE_KEYS: ReturnType<typeof cacheKeys>;
    MIX_util: ReturnType<typeof trackingUtils>;
    SERVICE_PROVIDERS: ReturnType<typeof SERVICE_PROVIDERS>;
    PRO_EVENT: ReturnType<typeof PrometheusConstant>;
    init(token: string): TelemetryService;
    track(name: string, options?: any, services?: string[]): void;
    timeEvent(name: string, services?: string[]): void;
    register(superProps: Record<string, any>): void;
    setPeople(options: Record<string, string | number>): void;
    setIdentity(agentId: string): void;
    setGroup(name: string, groups: string[]): void;
    setUserProfile(agentId: string, profile: Record<string, string>): void;
    optOutTracking(): void;
    optInTracking(): void;
    setOptOut(featureFlagOff: boolean): void;
    hasOptedOutTracking(): boolean;
    getInstance(): any;
    setValueInCache(key: string, value: string | number | boolean): void;
    getValueFromCache(key: string): any;
    getDataCenterDetails(): string;
    removeValueFromCache(key: string): void;
}
export {};
//# sourceMappingURL=telemetry-service.d.ts.map