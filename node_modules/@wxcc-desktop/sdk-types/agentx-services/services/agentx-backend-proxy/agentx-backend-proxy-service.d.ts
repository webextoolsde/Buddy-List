import { Service } from "../../index";
export declare function absService(): {
    fetchAddressBooksCMS: (p: {
        orgId: string;
        addressBookId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Aqm.Agent.AddressBooks>) => void) | undefined) => Promise<Service.Aqm.Agent.AddressBooks>;
    fetchCmsInitConfig: (p: {
        orgId: string;
        userId: string;
        isSupervisor: boolean;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Conf.Profile>) => void) | undefined) => Promise<Service.Conf.Profile>;
    fetchManagedTeams: (p: {
        orgId: string;
        userId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Conf.Team[]>) => void) | undefined) => Promise<Service.Conf.Team[]>;
    fetchManagedQueues: (p: {
        orgId: string;
        userId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Conf.Queue[]>) => void) | undefined) => Promise<Service.Conf.Queue[]>;
    fetchVteams: (p: {
        payload: Service.Aqm.Contact.VTeam;
        orgId: string;
        userId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Aqm.Contact.VteamDetails[]>) => void) | undefined) => Promise<Service.Aqm.Contact.VteamDetails[]>;
    fetchOutdialANICMS: (p: {
        orgId: string;
        outdialANIId: string;
    }, cb?: ((res: import("axios").AxiosResponse<import("../../core/aqm-reqs").Msg<{
        data: Record<string, any>;
    }>>) => void) | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
        data: Record<string, any>;
    }>>;
    fetchTeams: (p: {
        orgId: string;
        id: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Conf.Team[]>) => void) | undefined) => Promise<Service.Conf.Team[]>;
    secureCADVariables: (p: unknown, cb?: ((res: import("axios").AxiosResponse<Service.Conf.SecureData>) => void) | undefined) => Promise<Service.Conf.SecureData>;
    fetchQueues: (p: {
        orgId: string;
        id: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Conf.Queue[]>) => void) | undefined) => Promise<Service.Conf.Queue[]>;
    fetchEpDnMappings: (p: {
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Service.Cms.EpDnListMap[]>) => void) | undefined) => Promise<Service.Cms.EpDnListMap[]>;
};
declare type ErrDetails = {
    status: number;
    type: string;
    trackingId: string;
};
declare type absErrorIds = {
    "Service.abs.fetchAddressBooksCMS": ErrDetails;
} | {
    "Service.abs.fetchCmsInitConfig": ErrDetails;
} | {
    "Service.abs.fetchManagedTeamsFailed": ErrDetails;
} | {
    "Service.abs.fetchManagedQueuesFailed": ErrDetails;
} | {
    "Service.abs.FetchVTeamListFailed": ErrDetails;
} | {
    "Service.abs.fetchOutdialANICMS": ErrDetails;
} | {
    "Service.abs.secureCADVariablesFailed": ErrDetails;
} | {
    "Service.abs.fetchTeamsFailed": ErrDetails;
} | {
    "Service.abs.fetchQueuesFailed": ErrDetails;
} | {
    "Service.abs.epDnMappingsFailed": ErrDetails;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.abs": absErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Agentx.Backend { }
}
export {};
//# sourceMappingURL=agentx-backend-proxy-service.d.ts.map