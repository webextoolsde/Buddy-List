import { Signal } from "@uuip/unified-ui-platform-sdk";
import { Service } from "../../index";
export declare class WebexService {
    private readonly accessToken;
    private readonly newMessageSignal;
    private readonly newMeetingEventSignal;
    private readonly newPresenceEventSignal;
    private readonly newWebexChatActionDone;
    onNewMessage: Signal.WithData<Service.Webex.NewMessage>;
    onNewMeetingEvent: Signal.WithData<Service.Webex.NewMeetingEvent>;
    onNewPresenseEvent: Signal.WithData<Service.Webex.NewPresenseEvent>;
    onWebexChatActionDone: Signal.WithData<Service.Webex.WebexChatEvent>;
    private readonly notificationCountUpdateSignal;
    onNotifificationCountUpdate: Signal.WithData<number>;
    private webex;
    private timeout;
    private webexInitialized;
    registerWebex(isProd: boolean): void;
    private poleWebexStatus;
    getUserStatusForWebex(agentId: string | undefined): void;
    updateWebexMeeting(): void;
    private getCurrentMeeting;
    private parseMessage;
    private fetchPersonData;
    fetchPersonDataByEmail(personEmail: string): Promise<any>;
    private handleWebexMessageEvents;
    private readonly getStartTimeInMinute;
    private listenForIncomingMeetings;
    fetchUnreadConversationCount(): void;
    sendMessage(toPersonEmail: string, text: string): Promise<boolean>;
    private handleUnreadConversations;
    constructor(accessToken: string);
}
declare module "../../index" {
    namespace Service.Webex {
        type NewMessage = {
            sentBy: string;
            text: string;
            html: string;
            time: string;
            roomType: string;
            displayName: string;
            hasAttachments: boolean;
            id: string;
        };
        type NewMeetingEvent = {
            id: string;
            timeStamp: number;
            eventType: string;
            participantName: string;
            meetingType: "CALL" | "MEETING";
            isScheduledMeeting?: boolean;
            meetingInMinutes?: number;
        };
        type AddedMeetingEvent = {
            id: string;
            meeting: Meeting;
            type: string;
        };
        type RemovedEvent = {
            meetingId: string;
            reason: string;
        };
        type Meeting = {
            id: string;
            type: "CALL" | "MEETING";
            locusInfo: {
                fullState: {
                    lastActive: string;
                };
                host: {
                    name: string;
                };
                info: {
                    webExMeetingName: string;
                };
                scheduledMeeting: {
                    durationMinutes: number;
                    startTime: string;
                };
            };
            partner: {
                person: {
                    name: string;
                };
            };
        };
        type NewPresenseEvent = {
            eventType: string;
            status: string;
        };
        type WebexChatEvent = {
            status: boolean;
        };
        type WebexUserStatusResponse = {
            body: {
                status: string;
                expiresTTL: number;
            };
        };
    }
}
//# sourceMappingURL=webex-service.d.ts.map