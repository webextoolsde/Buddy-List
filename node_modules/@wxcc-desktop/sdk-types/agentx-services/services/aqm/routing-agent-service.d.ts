import { AqmReqs } from "../../core/aqm-reqs";
import { Service } from "../../index";
import Agent = Service.Aqm.Agent;
export declare function routingAgent(routing: AqmReqs): {
    reload: (cbRes?: ((res: import("axios").AxiosResponse<import("../../core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        dn: string;
        orgId: string;
        interactionIds: string[];
        isExtension: boolean;
        status: "LoggedIn";
        subStatus: "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        lastStateChangeReason?: string | undefined;
        profileType: string;
        channelsMap: Record<string, string[]>;
        dialNumber?: string | undefined;
        roles?: string[] | undefined;
        deviceType?: "AGENT_DN" | "EXTENSION" | "BROWSER" | null | undefined;
        deviceId?: string | null | undefined;
        type: "AgentReloginSuccess";
    }>>) => void) | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        dn: string;
        orgId: string;
        interactionIds: string[];
        isExtension: boolean;
        status: "LoggedIn";
        subStatus: "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        lastStateChangeReason?: string | undefined;
        profileType: string;
        channelsMap: Record<string, string[]>;
        dialNumber?: string | undefined;
        roles?: string[] | undefined;
        deviceType?: "AGENT_DN" | "EXTENSION" | "BROWSER" | null | undefined;
        deviceId?: string | null | undefined;
        type: "AgentReloginSuccess";
    }>>;
    logout: (p: {
        data: Agent.Logout;
    }, cbRes?: ((res: import("axios").AxiosResponse<import("../../core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: string;
        loggedOutBy?: string | undefined;
        roles?: string[] | undefined;
        type: "AgentLogoutSuccess";
    }>>) => void) | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: string;
        loggedOutBy?: string | undefined;
        roles?: string[] | undefined;
        type: "AgentLogoutSuccess";
    }>>;
    stationLogin: (p: {
        data: Agent.UserStationLogin;
    }, cbRes?: ((res: import("axios").AxiosResponse<import("../../core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        orgId: string;
        interactionIds: string[];
        status: string;
        subStatus: "Available" | "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        profileType: string;
        channelsMap: Record<string, string[]>;
        dialNumber?: string | undefined;
        roles?: string[] | undefined;
        supervisorSessionId?: string | undefined;
        type: "AgentStationLoginSuccess";
    }>>) => void) | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        orgId: string;
        interactionIds: string[];
        status: string;
        subStatus: "Available" | "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        profileType: string;
        channelsMap: Record<string, string[]>;
        dialNumber?: string | undefined;
        roles?: string[] | undefined;
        supervisorSessionId?: string | undefined;
        type: "AgentStationLoginSuccess";
    }>>;
};
//# sourceMappingURL=routing-agent-service.d.ts.map