import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { Service } from "../../index";
import Supervisor = Service.Aqm.Supervisor;
export declare function aqmSupervisor(aqm: AqmReqs): {
    startMonitoring: (p: {
        data: Supervisor.MonitoringRequest;
    }, cbRes?: ((res: import("axios").AxiosResponse<any>) => void) | undefined) => Promise<any>;
    endMonitoring: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<any>) => void) | undefined) => Promise<any>;
    holdMonitoring: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<any>) => void) | undefined) => Promise<any>;
    unHoldMonitoring: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<any>) => void) | undefined) => Promise<any>;
    eMonitoringOffered: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Service.Aqm.Contact.Interaction;
                childInteractionId?: string | undefined;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                queueName?: string | undefined;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
                autoResumed?: boolean | undefined;
                reasonCode?: string | number | undefined;
                reason?: string | undefined;
                consultingAgentId?: string | undefined;
                taskId?: string | undefined;
                task?: Service.Aqm.Contact.Interaction | undefined;
                supervisorId?: string | undefined;
                monitorType?: string | undefined;
                supervisorDN?: string | undefined;
                id?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Service.Aqm.Contact.Interaction;
            childInteractionId?: string | undefined;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            queueName?: string | undefined;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
            autoResumed?: boolean | undefined;
            reasonCode?: string | number | undefined;
            reason?: string | undefined;
            consultingAgentId?: string | undefined;
            taskId?: string | undefined;
            task?: Service.Aqm.Contact.Interaction | undefined;
            supervisorId?: string | undefined;
            monitorType?: string | undefined;
            supervisorDN?: string | undefined;
            id?: string | undefined;
        }>>;
    };
    eMonitoringStarted: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Service.Aqm.Contact.Interaction;
        childInteractionId?: string | undefined;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        queueName?: string | undefined;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
        autoResumed?: boolean | undefined;
        reasonCode?: string | number | undefined;
        reason?: string | undefined;
        consultingAgentId?: string | undefined;
        taskId?: string | undefined;
        task?: Service.Aqm.Contact.Interaction | undefined;
        supervisorId?: string | undefined;
        monitorType?: string | undefined;
        supervisorDN?: string | undefined;
        id?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Service.Aqm.Contact.Interaction;
                childInteractionId?: string | undefined;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                queueName?: string | undefined;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
                autoResumed?: boolean | undefined;
                reasonCode?: string | number | undefined;
                reason?: string | undefined;
                consultingAgentId?: string | undefined;
                taskId?: string | undefined;
                task?: Service.Aqm.Contact.Interaction | undefined;
                supervisorId?: string | undefined;
                monitorType?: string | undefined;
                supervisorDN?: string | undefined;
                id?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Service.Aqm.Contact.Interaction;
            childInteractionId?: string | undefined;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            queueName?: string | undefined;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
            autoResumed?: boolean | undefined;
            reasonCode?: string | number | undefined;
            reason?: string | undefined;
            consultingAgentId?: string | undefined;
            taskId?: string | undefined;
            task?: Service.Aqm.Contact.Interaction | undefined;
            supervisorId?: string | undefined;
            monitorType?: string | undefined;
            supervisorDN?: string | undefined;
            id?: string | undefined;
        }>>;
    };
    eMonitoringRequestCreateFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<any> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: any) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<any>;
    };
    eMonitoringFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        orgId: string;
        id: string;
        monitorType: string;
        supervisorId: string;
        queueId: string;
        queueName: string;
        supervisorDN: string;
        taskId?: string | undefined;
        reason: string;
        reasonCode: number;
        trackingId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                orgId: string;
                id: string;
                monitorType: string;
                supervisorId: string;
                queueId: string;
                queueName: string;
                supervisorDN: string;
                taskId?: string | undefined;
                reason: string;
                reasonCode: number;
                trackingId: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            queueId: string;
            queueName: string;
            supervisorDN: string;
            taskId?: string | undefined;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>>;
    };
    eMonitoringEnded: import("@uuip/unified-ui-platform-sdk").Signal.WithData<any> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: any) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<any>;
    };
    eMonitoringEndFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        orgId: string;
        id: string;
        monitorType: string;
        supervisorId: string;
        taskId?: string | undefined;
        agentId?: string | undefined;
        reason: string;
        reasonCode: number;
        trackingId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                orgId: string;
                id: string;
                monitorType: string;
                supervisorId: string;
                taskId?: string | undefined;
                agentId?: string | undefined;
                reason: string;
                reasonCode: number;
                trackingId: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            taskId?: string | undefined;
            agentId?: string | undefined;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>>;
    };
    eMonitoringHeld: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        orgId: string;
        id: string;
        monitorType: string;
        supervisorId: string;
        supervisorDN: string;
        taskId?: string | undefined;
        trackingId: string;
        agentId: string;
        eventType: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                orgId: string;
                id: string;
                monitorType: string;
                supervisorId: string;
                supervisorDN: string;
                taskId?: string | undefined;
                trackingId: string;
                agentId: string;
                eventType: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            supervisorDN: string;
            taskId?: string | undefined;
            trackingId: string;
            agentId: string;
            eventType: string;
        }>>;
    };
    eMonitoringHoldFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        orgId: string;
        id: string;
        monitorType: string;
        supervisorId: string;
        queueId: string;
        queueName: string;
        supervisorDN: string;
        taskId?: string | undefined;
        reason: string;
        reasonCode: number;
        trackingId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                orgId: string;
                id: string;
                monitorType: string;
                supervisorId: string;
                queueId: string;
                queueName: string;
                supervisorDN: string;
                taskId?: string | undefined;
                reason: string;
                reasonCode: number;
                trackingId: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            queueId: string;
            queueName: string;
            supervisorDN: string;
            taskId?: string | undefined;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>>;
    };
    eMonitoringUnHeld: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        orgId: string;
        id: string;
        monitorType: string;
        supervisorId: string;
        supervisorDN: string;
        taskId?: string | undefined;
        trackingId: string;
        agentId: string;
        eventType: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                orgId: string;
                id: string;
                monitorType: string;
                supervisorId: string;
                supervisorDN: string;
                taskId?: string | undefined;
                trackingId: string;
                agentId: string;
                eventType: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            supervisorDN: string;
            taskId?: string | undefined;
            trackingId: string;
            agentId: string;
            eventType: string;
        }>>;
    };
    eMonitoringUnHoldFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        orgId: string;
        id: string;
        monitorType: string;
        supervisorId: string;
        queueId: string;
        queueName: string;
        supervisorDN: string;
        taskId?: string | undefined;
        reason: string;
        reasonCode: number;
        trackingId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                orgId: string;
                id: string;
                monitorType: string;
                supervisorId: string;
                queueId: string;
                queueName: string;
                supervisorDN: string;
                taskId?: string | undefined;
                reason: string;
                reasonCode: number;
                trackingId: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            queueId: string;
            queueName: string;
            supervisorDN: string;
            taskId?: string | undefined;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>>;
    };
};
declare module "../../index" {
    namespace Service.Aqm.Supervisor {
        type MonitoringRequest = {
            id: string;
            monitorType: string;
            queueIds?: Set<string>;
            teams?: Set<string>;
            sites?: Set<string>;
            agents?: Set<string>;
            startUTCTimestamp?: number;
            continuousDuration?: number;
            taskId?: string;
            trackingId: string;
            invisibleMode?: boolean;
        };
        type MonitoringFailed = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            queueId: string;
            queueName: string;
            supervisorDN: string;
            taskId?: string;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>;
        type MonitoringEndFailed = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            taskId?: string;
            agentId?: string;
            reason: string;
            reasonCode: number;
            trackingId: string;
        }>;
        type MonitoringHeld = Msg<{
            orgId: string;
            id: string;
            monitorType: string;
            supervisorId: string;
            supervisorDN: string;
            taskId?: string;
            trackingId: string;
            agentId: string;
            eventType: string;
        }>;
    }
}
declare type supervisorErrorIds = {
    "Service.aqm.supervisor.monitoringFailed": Supervisor.MonitoringFailed;
    "Service.aqm.supervisor.monitoringEndFailed": Supervisor.MonitoringEndFailed;
    "Service.aqm.supervisor.monitoringHoldFailed": Supervisor.MonitoringFailed;
    "Service.aqm.supervisor.monitoringUnHoldFailed": Supervisor.MonitoringFailed;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.supervisor": supervisorErrorIds;
        }
    }
}
export {};
//# sourceMappingURL=routing-supervisor-service.d.ts.map