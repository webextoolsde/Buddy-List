import { Service } from "../..";
import { AqmService } from "../aqm/aqm-service";
export declare class ConfService {
    private readonly aqm;
    profile: Service.Conf.Profile | null;
    abs: any;
    subStatus: string;
    status: string;
    constructor(aqm: AqmService, abs: any);
    getCampaignManagerAdditionalInfo(orgUrlMappingresponse: Service.Cms.OrgUrlMappingResponse, agent: Service.Aqm.Configs.AgentPropertyChanged["data"]["data"]): string;
    getLcmUrl(orgUrlMappingresponse: Service.Cms.OrgUrlMappingResponse, agent: Service.Aqm.Configs.AgentPropertyChanged["data"]["data"]): string;
    getFormattedUrl(url: string): string;
    getSortedVoiceOptions: (loginVoiceOptions: Service.Conf.LoginOption[]) => Service.Conf.LoginOption[];
    getLoginVoiceOptions: (loginVoiceOptions: Service.Conf.LoginOption[] | undefined) => Service.Conf.LoginOption[];
    fetchProfile(cmsConfigFlag?: boolean, orgId?: string, userId?: string, isSupervisor?: boolean): Promise<Service.Conf.Profile>;
    updateProfileTeams(teams: Service.Conf.Team[]): void;
}
declare module "../../index" {
    namespace Service.Conf {
        type Profile = {
            teams: Team[];
            defaultDn: string;
            forceDefaultDn: Record<string, any> | boolean;
            forceDefaultDnForAgent: boolean;
            regexUS: RegExp | string;
            regexOther: RegExp | string;
            agentId: string;
            agentName: string;
            agentMailId: string;
            agentSubStatus: string;
            agentStatus: string;
            agentProfileID: string;
            dialPlan: Service.Aqm.Configs.DialPlan;
            skillProfileId: string;
            siteId: string;
            enterpriseId: string;
            privacyShieldVisible: string | boolean;
            idleCodes: Service.Aqm.Configs.Entity[];
            idleCode: any;
            defaultIdleName: string;
            wrapupCodes: Service.Aqm.Configs.Entity[];
            defaultWrapupCode: string;
            wrapUpData: Service.Aqm.Configs.WrapupData | any;
            orgId: string;
            isOutboundEnabledForTenant: boolean;
            isOutboundEnabledForAgent: boolean;
            isAdhocDialingEnabled: boolean;
            isAgentAvailableAfterOutdial: boolean;
            isCampaignManagementEnabled: boolean;
            outDialEp: string;
            isEndCallEnabled: boolean;
            isEndConsultEnabled: boolean;
            cadVariables: Service.Aqm.Configs.CadVariables[];
            callVariablesSuppressed: any;
            lcmUrl: string;
            agentDbId: string;
            agentAnalyzerId: string;
            allowConsultToQueue: boolean;
            campaignManagerAdditionalInfo: string;
            agentPersonalStatsEnabled: boolean;
            addressBookId?: string;
            outdialANIId?: string;
            analyserUserId?: string;
            isCallMonitoringEnabled?: boolean;
            isMidCallMonitoringEnabled?: boolean;
            isManagedTeamsEnabled?: boolean;
            isManagedQueuesEnabled?: boolean;
            isSendMessageEnabled?: boolean;
            urlMappings?: URLMappings;
            preferredSupervisorTeamId: string;
            isTimeoutDesktopInactivityEnabled: boolean;
            timeoutDesktopInactivityMins?: number;
            isAnalyzerEnabled?: boolean;
            tenantTimezone?: string;
            isMonitoringHoldUnHoldEnabled?: boolean;
            loginVoiceOptions?: LoginOption[];
            deviceType?: Service.Aqm.Agent.DeviceType;
        };
        type LoginOption = "AGENT_DN" | "EXTENSION" | "BROWSER";
        type Team = {
            teamId: string;
            teamName: string;
            desktopLayoutId?: string;
        };
        type Queue = {
            queueId: string;
            queueName: string;
        };
        type URLMappings = {
            acqueonApiUrl: string;
            acqueonConsoleUrl: string;
        };
        type Role = {
            roleId: string;
            roleName: string;
            roleDisplay: string;
        };
        type UserProfile = {
            teamName: string | null;
            teamId: string | null;
            roles: Array<string>;
            dnNumber: string;
            isExtension: boolean;
            usesOtherDN: boolean;
            extensionNumber: string;
            dialNumberValueForNonUS: string;
            isInternational: boolean;
            phoneNumber: string;
            countryCallingCode: string;
            countryCodeValue: string;
            isRememberMyCredentials: boolean;
            deviceType?: Service.Aqm.Agent.DeviceType;
        };
        type OptionMember = {
            [key: string]: string;
        };
        type SecureData = {
            data: Record<string, string>;
        };
    }
}
//# sourceMappingURL=conf-service.d.ts.map