import { Service } from "../../index";
import Cms = Service.Cms;
export declare function cmsService(): {
    fetchChatResponses: (p: {
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.ChatTemplateResponse>) => void) | undefined) => Promise<Cms.ChatTemplateResponse>;
    fetchTeamsById: (p: {
        orgId: string;
        teamId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.TeamResponseData>) => void) | undefined) => Promise<Cms.TeamResponseData>;
    fetchTeamsByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.TeamResponse & Cms.ManagedTeamResponse>) => void) | undefined) => Promise<Cms.TeamResponse & Cms.ManagedTeamResponse>;
    fetchQueuesByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.ManagedQueueResponse>) => void) | undefined) => Promise<Cms.ManagedQueueResponse>;
    fetchDesktopLayout: (p: {
        orgId: string;
        desktopLayoutId?: string | undefined;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.DesktopLayoutResponse>) => void) | undefined) => Promise<Cms.DesktopLayoutResponse>;
    fetchGlobalDesktopLayoutV2: (p: {
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.GlobalDesktopLayoutResponseMappingV2>) => void) | undefined) => Promise<Cms.GlobalDesktopLayoutResponseMappingV2>;
    fetchTeamsByAgent: (p: {
        userId: string;
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.fetchTeamsByAgentResponse>) => void) | undefined) => Promise<Cms.fetchTeamsByAgentResponse>;
    fetchUserRecord: (p: {
        userId: string;
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.UserRecordResponse>) => void) | undefined) => Promise<Cms.UserRecordResponse>;
    fetchUserProfile: (p: {
        profileId: string;
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.UserProfileResponse>) => void) | undefined) => Promise<Cms.UserProfileResponse>;
    fetchEntryPointsByPage: (p: {
        orgId: any;
        url: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.EntryPointsResponse>) => void) | undefined) => Promise<Cms.EntryPointsResponse>;
    fetchDialNumberList: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.DialNumberResponse>) => void) | undefined) => Promise<Cms.DialNumberResponse>;
    fetchAddressBookByPage: (p: {
        orgId: string;
        url: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.AddressBookResponse>) => void) | undefined) => Promise<Cms.AddressBookResponse>;
    fetchOrgUrlMappingByNameV2: (p: {
        orgId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.OrgUrlMappingResponse>) => void) | undefined) => Promise<Cms.OrgUrlMappingResponse>;
    fetchAllTeams: (orgId: string) => Promise<Cms.AllTeamResponse>;
    fetchAllManagedTeams: (orgId: string) => Promise<Cms.ManagedAllTeamResponse>;
    fetchAllManagedQueues: (orgId: string) => Promise<Cms.ManagedAllQueueResponse>;
    fetchAllEntryPoints: (orgId: string) => Promise<Cms.AllEntryPointResponse>;
    fetchAllAddressBook: (p: {
        orgId: string;
        addressBookId: string;
        allowRetry: boolean;
    }) => Promise<Cms.AllAddressBookResponse>;
};
declare type cmsErrorIds = "Service.cms.fetchChatResponses" | "Service.cms.fetchAllTeams" | "Service.cms.fetchTeamsById" | "Service.cms.fetchAllQueues" | "Service.cms.fetchDesktopLayout" | "Service.cms.fetchDefaultDesktopLayout" | "Service.cms.fetchTeamsByAgent" | "Service.cms.fetchManagedTeams" | "Service.cms.fetchUserRecord" | "Service.cms.fetchUserProfile" | "Service.cms.fetchEntryPointsList" | "Service.cms.fetchDialNumberList" | "Service.cms.fetchAddressBookList";
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.cms": cmsErrorIds;
        }
    }
}
declare module "../../index" {
    namespace Service.Cms {
        type ChatTemplateResponse = ChatTemplate[];
        type ChatTemplate = {
            id: string;
            name: string;
            language: string;
            status: boolean;
            content: string;
            queueIds: string[];
            links: any;
            createdTime: number;
            lastUpdatedTime: number;
            allQueues?: boolean;
        };
        type SplitIOKey = {
            key: string;
        };
        type AllTeamResponse = TeamResponseData[];
        type ManagedAllTeamResponse = ManagedTeamResponseData[];
        type ManagedAllQueueResponse = ManagedQueueResponseData[];
        type AllEntryPointResponse = EntryPointsResponseData[];
        type AllAddressBookResponse = AddressBookResponseData[];
        type AllDialNumberResponse = DialNumberResponseData[];
        type TeamResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: AllTeamResponse;
        };
        type ManagedTeamResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: ManagedAllTeamResponse;
        };
        type ManagedQueueResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: ManagedAllQueueResponse;
        };
        type EntryPointsResponse = {
            meta: {
                links: {
                    next: string;
                };
            };
            data: AllEntryPointResponse;
        };
        type AddressBookResponse = {
            meta: {
                links: {
                    next: string;
                };
                totalPages: number;
            };
            data: AllAddressBookResponse;
        };
        type DialNumberResponse = {
            meta: {
                links: {
                    next: string;
                };
                totalPages: number;
            };
            data: AllDialNumberResponse;
        };
        type fetchTeamsByAgentResponse = {
            details: {
                user: TeamsByAgentMap;
            };
        };
        type TeamsByAgentMap = {
            id: string;
            type: "user";
            attributes: TeamByAgentAuxiliaryDataAttributes;
        };
        type EpDnListMap = {
            name: string;
            dialledNumber: string;
        };
        type DesktopLayoutResponseMapping = {
            attributes: DesktopLayoutAuxiliaryDataAttributes;
            auxiliaryMetadata: any;
        };
        type GlobalDesktopLayoutResponseMapping = {
            auxiliaryDataList: DesktopLayoutAuxiliaryData[];
            auxiliaryMetadata: any;
        };
        type GlobalDesktopLayoutResponseMappingV2 = DesktopLayoutResponse[];
        type TeamResponseData = {
            id: string;
            dbId: string;
            active: boolean;
            createdTime: number;
            desktopLayoutId: string;
            lastUpdatedTime: number;
            multiMediaProfileId: string;
            name: string;
            siteId: string;
            skillProfileId: string;
            teamStatus: string;
            teamType: string;
            userIds: string[];
        };
        type ManagedTeamResponseData = {
            id: string;
            links: [];
            name: string;
            dbId?: string;
            siteId: string;
        };
        type ManagedQueueResponseData = {
            id: string;
            links: [];
            name: string;
        };
        type DesktopLayoutAuxiliaryData = {
            id: string;
            type: "desktop-layout";
            attributes: DesktopLayoutAuxiliaryDataAttributes;
            auxiliaryDataType: string;
        };
        type TeamByAgentAuxiliaryDataAttributes = {
            teamInfo__s: any;
        };
        type DesktopLayoutResponse = {
            createdTime: number;
            defaultJsonModified: boolean;
            defaultJsonModifiedTime: number;
            description: string;
            editedBy: string;
            global: boolean;
            id: string;
            jsonFileContent: string;
            jsonFileName: string;
            lastUpdatedTime: number;
            modifiedTime: number;
            name: string;
            status: boolean;
            teamIds: string[];
            validated: boolean;
            validatedTime: number;
        };
        type DesktopLayoutAuxiliaryDataAttributes = {
            description__s: string;
            jsonFileContent__s: string;
            global__i: number;
            assigned__i: number;
            editedBy__s: string;
            name__s: string;
            cstts: number;
            status__i: number;
            tid: string;
            validatedTime__l: number;
            sid: string;
        };
        type UserRecordResponse = {
            organizationId: string;
            id: string;
            firstName: string;
            lastName: string;
            email: string;
            workPhone: string;
            mobile: string;
            ciUserId: string;
            xspVersion: string;
            subscriptionId: string;
            userProfileId: string;
            contactCenterEnabled: boolean;
            siteId: string;
            teamIds: string[];
            skillProfileId: string;
            agentProfileId: string;
            multimediaProfileId: string;
            deafultDialledNumber: string;
            externalIdentifier: string;
            active: boolean;
            imiUserCreated: boolean;
            links: any;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type UserProfileResponse = {
            accessAllEntryPoints: string;
            accessAllModules: string;
            accessAllQueues: string;
            accessAllSites: string;
            accessAllTeams: string;
            active: boolean;
            createdTime: number;
            description: string;
            editableFolderIds: string;
            entryPoints: Array<string>;
            id: string;
            lastUpdatedTime: number;
            name: string;
            nonViewableFolderIds: Array<string>;
            organizationId: string;
            profileType: string;
            queues: Array<string>;
            sites: Array<string>;
            teams: Array<string>;
            userProfileAppModules: Array<any>;
            version: number;
            viewableFolderIds: Array<string>;
        };
        type EntryPointsResponseData = {
            active: boolean;
            channelType: string;
            createdTime: number;
            description: string;
            entryPointType: string;
            id: string;
            lastUpdatedTime: number;
            links: any;
            maximumActiveContacts: 0;
            name: string;
            routePointId: string;
            serviceLevelThreshold: number;
            subscriptionId: string;
            xspVersion: string;
            version: number;
            ccOneQueue: boolean;
        };
        type DialNumberResponseData = {
            organizationId: string;
            id: string;
            version: number;
            dialledNumber: string;
            routePointId: string;
            entryPointId: string;
            defaultAni: boolean;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
        type AddressBookResponseData = {
            id: string;
            version: number;
            name: string;
            number: string;
            links: Array<any>;
        };
        type OrgUrlMappingResponse = OrgUrlMappingResponseData[];
        type OrgUrlMappingResponseData = {
            organizationId: string;
            id: string;
            version: number;
            name: string;
            url: string;
            links: Array<any>;
            createdTime: number;
            lastUpdatedTime: number;
        };
    }
}
export {};
//# sourceMappingURL=cms-service.d.ts.map