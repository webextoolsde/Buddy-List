import "./components/ConnectionLost";
import "./components/CssDynamic";
import { Store } from "../store/index";
import { MobxLitElement } from "@adobe/lit-mobx";
import "@agentx/agentx-mfe-react-based";
import "@agentx/agentx-mfe-wc-based";
import { UserStationLoginTypes } from "@agentx/agentx-mfe-wc-based";
import "@momentum-ui/web-components";
import { OAuth } from "@uuip/unified-ui-platform";
import "@uuip/unified-ui-platform-common-components";
import { ErrorModal } from "@uuip/unified-ui-platform-common-components";
import "@uuip/uuip-advance-layout";
import "./components/ChangeTeamLoading";
import "./components/EmpyResponsiveWidget";
import "./components/UpdateProfileSettingsLoading";
import "./components/WebCallingWidget";
declare global {
    interface Window {
        wxcc: any;
    }
}
declare const App_base: typeof MobxLitElement & (new (...args: any[]) => import("@uuip/unified-ui-platform-sdk").I18N.I18nElement);
export declare class App extends App_base {
    private isInitialized;
    private readonly isIframe;
    private isLoggedIn;
    private isConnectionLost;
    private isRestoreFailed;
    private isSessionExpired;
    private isrequestedIframeLogin;
    private isMultiLogin;
    private cachedLayoutConfig;
    private isNotifsSuccess;
    private isWebexCallingDeviceRegistered;
    /**
     * Init Routing
     */
    private readonly agentXAppRouting;
    private idleActivity;
    private agentXRoutingStart;
    private agentXRoutingStop;
    shouldCollapseTaskListWhenResized: () => boolean;
    onResize: () => void;
    shouldReloadForNewVersion: () => boolean;
    /**
     * End init routing
     */
    isEnvironmentProd: () => boolean | undefined;
    connectedCallback(): Promise<void>;
    updateResponsiveList(e: any): void;
    getSubStatus(auxCodeId: string): string;
    onCiLoginSuccess(token: OAuth.Token): Promise<void>;
    private reloginAqm;
    private handleConnectionLost;
    private requestIframeLogin;
    disconnectedCallback(): void;
    static get styles(): import("lit-element").CSSResult;
    stationLoginSuccess(e: UserStationLoginTypes.ESuccess): Promise<void>;
    updateLayout(teamId: string): Promise<void>;
    stationLoginError(e: UserStationLoginTypes.EError): void;
    showInactivityTimerForAll(): boolean;
    showInactivityTimerForAgent(): boolean;
    showInactivityTimerForSupervisor(): boolean;
    onStationLoginSuccess(e: any): void;
    onLogoutConfirm(e: Store.Session.ModuleErrorDialog.EErrorDetail): void;
    errorModalDisplay(e: ErrorModal.EModalShow): void;
    createAnalyzerSession(): {};
    loadAcqueonScript(): void;
    loadRTDWC(): void;
    rtdcSubscriptionLog(event: any): void;
    initializeRTDWC(): void;
    updateWxmSettings(token: OAuth.Token): void;
    initializeIdleActivity(): void;
    removeIdleActivity(): void;
    checkIfFeatureFlagsEnabled(): boolean;
    render(): import("lit-element").TemplateResult;
}
export {};
