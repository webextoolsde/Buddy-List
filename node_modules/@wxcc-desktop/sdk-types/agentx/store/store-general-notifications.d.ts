import { Store } from "./index";
import { Utility } from "@agentx/agentx-mfe-react-based";
import { Notifications } from "@uuip/unified-ui-platform-sdk";
export declare class ModuleGeneralNotifications {
    readonly notifications: Notifications.Service;
    constructor(notifications: Notifications.Service);
    isNotificationsEnabled: boolean;
    isSilentNotificationsEnabled: boolean;
    countAdded: number;
    countPending: number;
    countActivated: number;
    countDeactivated: number;
    webexNotificationCount: number;
    setWebexNotificationCount(count: number): void;
    clearAll(): void;
    isSelectedTaskHasChatNotifications(n: Notifications.Item, taskId: string): boolean | "" | undefined;
    deactivateReadMessagesFromNotifications(taskId: string): void;
    private restoreNotificationsOnReload;
    private updateStoreNotificationsData;
    saveNotificationsSettings(notificationsSettings: Store.GeneralNotifications.Settings): void;
    restoreNotificationsSettings(): void;
    fire(raw: Notifications.ItemMeta.Raw | Notifications.ItemMeta.Raw[]): Notifications.Item[] | undefined;
    fireNewChatMessage(data: Utility.MediaDetails, type: string, taskId: string): void;
    fireChatEnded(data: Utility.MediaDetails): void;
    fireScreenPop(conf: Notifications.ItemMeta.RawData): void;
    fireShortcutKeyConflict(title: string, data: string): void;
    fireCheckPWAInstall(): Promise<boolean>;
    fireNotificationEvent(notificationData: Notifications.ItemMeta.RawData, options?: Notifications.ItemMeta.Options): Notifications.Item[] | undefined;
    updateNotificationSettings(isNotificationsEnabled: boolean, isSilentNotificationsEnabled: boolean): void;
    updateConfig(toasterTimer?: number, maximumToasterCount?: number): void;
}
/**
 * Set up notification host
 */
export declare const generalNotifications: ModuleGeneralNotifications;
declare module "@/store" {
    namespace Store.GeneralNotifications {
        type Settings = {
            settings: boolean;
            silent: boolean;
        };
    }
}
