import { CssDynamic } from "../app/components/CssDynamic";
import { Chat, EmailComposer, PciComplianceSettings } from "@agentx/agentx-mfe-react-based";
import { WxmWrapper } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
export declare class ModuleApp {
    constructor();
    title: string;
    logo: any;
    appTitleAsImage: boolean;
    taskAreaCollapsed: boolean;
    auxilliaryPanelCollapsed: boolean;
    defaultMaximizeAreaName: string;
    darkThemeEnabled: boolean;
    darkMode: boolean;
    wasAskedPwaInstall: boolean;
    showAuxPanelAsOverlay: boolean;
    changeTeamLoading: boolean;
    isStationLoginOpen: boolean;
    changeTeamsError: boolean;
    isStationLoginSuccess: boolean;
    changeProfileSettingsLoading: boolean;
    changeProfileSettingsError: boolean;
    stopNavigateOnAcceptTask: boolean;
    collapseVoiceIntPane: boolean;
    isVoiceIntPaneUpdatedByUser: boolean | null;
    taskPageIllustration: string;
    isRTDIntialized: boolean;
    /**
     * WXM
     */
    wxmEnabled: boolean;
    userModel: WxmWrapper.ResponseData;
    /**
     * WEBEX
     */
    webexEnabled: boolean;
    webexShowModal: boolean;
    webexMinimized: boolean;
    language: string;
    webexMeetingTimeStamp: number;
    webexDndEnabled: boolean;
    webexEventRegistered: boolean;
    isEnvironmentProd: boolean;
    domainUrl: string;
    featureFlags: {
        isCareAttachmentEnabled: boolean;
        isVideoEnabled: boolean;
        isCloudCherryEnabled: boolean;
        isDigitalFFEnabled: boolean;
        isPCIComplianceEnabled: boolean;
        isDynamicDesktopLayoutEnable: boolean;
        isInactivityTimeoutEnabled: boolean;
        isESDInactivityTimeoutEnabled: boolean;
        isImiChatWidgetEnabled: boolean;
        isSteeringDigitsAppendEnabled: boolean;
        isTahoeEnabled: boolean;
        isSupervisorDesktopEnabled: boolean;
        isESDStationLoginFlowEnabled: boolean;
        isSecureCADVariablesEnabled: boolean;
        isCMSConfigMigrated: boolean;
        isOutdialSpecialCharsEnabled: boolean;
        isDesktopNotesWidgetEnabled: boolean;
        isAdvancedHeaderEnabled: boolean;
        isLogRocketEnabled: boolean;
        isDesktopContactCleanup: boolean;
        isLogRocketMaskingDisabled: boolean;
        isDesktopEngagedLabelEnabled: boolean;
        isInternationalDiallingEnabled: boolean;
        isInvitationPopoverEnabled: boolean;
        isConfigurableTaskVariablesEnabled: boolean;
        isIMIGlobalVariablesEnabled: boolean;
        isGlobalVariablesEnabled: boolean;
        isDefaultLandingpageEnabled: boolean;
        isDesktopConsultToEntryPointDnEnabled: boolean;
        isDesktopEPBlindTransfer: boolean;
        isDesktopIllustrationRefreshEnabled: boolean;
        isMidCallMonitoringEnabled: boolean;
        isMonitoringHoldUnHoldEnabled: boolean;
        isAIHVirtualization: boolean;
        isDesktopMaxSessionLimitsEnabled: boolean;
        isAIDFixedVariablesEnabled: boolean;
        isAnalyzerNewUxEnabled: boolean;
        isNetworkCheckPingAPIEnabled: boolean;
        isCallbackRetryEnabled: boolean;
        isWebRTCEnabled: boolean;
        isDesktopRemoveOlhEnabled: boolean;
        isProgressiveCampaignEnabled: boolean;
        isUglyAqmFallbackEnabled: boolean;
    };
    pciCompliance: {
        action: string;
        isAttachmentEnabled: boolean;
    };
    pciAllowedAttachmentTypes: string;
    imiScriptLoaded: boolean;
    /**
     * Computed values to simplify passing data to Web Components
     */
    get chatConfigs(): Chat.ChatConfigs;
    get pciSettings(): PciComplianceSettings;
    get pciAllowedAttachments(): string;
    get emailConfigs(): EmailComposer.EmailConfigs;
    get imiConfigs(): {
        imiWidgetEnabled: boolean;
        imiScriptLoaded: boolean;
        isStationLoginSuccess: boolean;
    };
    get cssDynamicVars(): CssDynamic.AgentXVars;
    updateIsRTDInitializedFlag(value: boolean): void;
    login(stationLoginData: Service.Aqm.Agent.UserStationLogin, userPrefData: Service.userPrefs.UserPreferences): Promise<void>;
    loginAgentWithNewTeam(stationLoginData: Service.Aqm.Agent.UserStationLogin): Promise<void>;
    getAgentDN(): string | null;
    getDefaultAuxCode(): string;
    saveUserPreferenceInSessionStorage(data: any): void;
    deleteUserPreferenceFromSessionStorage(): void;
    /**
     * Save or Update User Preferences when submit is called from User Station Login or Profile Settings
     * @param payloadUserPreferences
     */
    saveOrUpdateUserPreferences(payloadUserPreferences: Service.userPrefs.UserPreferences): Promise<void>;
    /**
     * Delete User Preferences when Remember Me checkbox is unchecked and submit is called from User Station Login or Profile Settings
     */
    deleteUserPreferences(): Promise<void>;
    logout(profileDetails: Service.Conf.UserProfile): Promise<void>;
    logoutFromCurrentTeam(selectedTeam: Service.Conf.Team): Promise<void>;
    /**
     * Actions
     */
    updateTitle(title: string): void;
    updateAppTitleAsImage(appTitleAsImage: boolean): void;
    updateLogo(logoUrl: string): void;
    updateTaskPageIllustration(url: string): void;
    updateStopNavigateOnAcceptTask(isEnabled: boolean): void;
    updateCollapseVoiceIntPane(isEnabled: boolean): void;
    updateUserVoiceIntPaneState(isEnabled: boolean): void;
    toggleDarkMode(isEnabled: boolean): void;
    updateWebexEnabled(isEnabled: boolean): void;
    updateWebexShowModal(isShow: boolean): void;
    updateWebexMeetingTimeStamp(timeStamp: number): void;
    updateWebexMinimized(isShow: boolean): void;
    updateLanguage(lng: string): void;
    updateWxmEnabled(isEnabled: boolean): void;
    updateWebexDnd(isEnabled: boolean): void;
    updateStationLoginOpen(isOpen: boolean): void;
    updateStationLoginSuccess(isSuccess: boolean): void;
    setChangeTeamsLoginFailed(isError: boolean): void;
    setChangeProfileSettingsLoginFailed(isError: boolean): void;
    updateIMIFeatureFlag(status: boolean): void;
    updateUserModel(accessToken: WxmWrapper.ResponseData["access_token"], expiresIn: WxmWrapper.ResponseData["expires_in"]): void;
    updateFeatureFlags(featureFlags: object | undefined): void;
    updatePciCompliance(pciComplianceSettings: PciComplianceSettings | undefined): void;
    updatePciAllowedAttachmentTypes(allowedAttachmentTypes: string): void;
    toggleTaskAreaCollapse(): void;
    toggleAuxilliaryPanelCollapse(): void;
    setShowAuxPanelAsOverlay(showAuxPanelAsOverlayParam: boolean): void;
    checkPwaInstall(): Promise<void>;
    setAskedPwaInstall(): void;
    setChangeTeamLoading(changeTeamLoading: boolean): void;
    changeAgentTeam(selectedTeam: Service.Conf.Team): void;
    updateProfileSettings(profileDetails: Service.Conf.UserProfile): void;
    setChangeProfileSetingsLoading(changeProfileSettingsLoading: boolean): void;
    setImiScriptLoad(): void;
    setIsEnvironmentProd(isProd: boolean): void;
    setDomainUrl(url: string): void;
}
declare module "@/store" {
    namespace Store.App {
        type FeatureFlagConfigs = {
            isCareAttachmentEnabled: boolean;
            isPCIComplianceEnabled: boolean;
            isVideoEnabled: boolean;
            isDigitalFFEnabled: boolean;
            isCloudCherryEnabled: boolean;
            isDynamicDesktopLayoutEnable: boolean;
            isInactivityTimeoutEnabled: boolean;
            isESDInactivityTimeoutEnabled: boolean;
            isImiChatWidgetEnabled: boolean;
            isSteeringDigitsAppendEnabled: boolean;
            isTahoeEnabled: boolean;
            isSupervisorDesktopEnabled: boolean;
            isESDStationLoginFlowEnabled: boolean;
            isSecureCADVariablesEnabled: boolean;
            isCMSConfigMigrated: boolean;
            isOutdialSpecialCharsEnabled: boolean;
            isDesktopNotesWidgetEnabled: boolean;
            isAdvancedHeaderEnabled: boolean;
            isLogRocketEnabled: boolean;
            isDesktopContactCleanup: boolean;
            isLogRocketMaskingDisabled: boolean;
            isDesktopEngagedLabelEnabled: boolean;
            isInternationalDiallingEnabled: boolean;
            isInvitationPopoverEnabled: boolean;
            isConfigurableTaskVariablesEnabled: boolean;
            isIMIGlobalVariablesEnabled: boolean;
            isGlobalVariablesEnabled: boolean;
            isDefaultLandingpageEnabled: boolean;
            isDesktopConsultToEntryPointDnEnabled: boolean;
            isDesktopEPBlindTransfer: boolean;
            isDesktopIllustrationRefreshEnabled: boolean;
            isMidCallMonitoringEnabled: boolean;
            isMonitoringHoldUnHoldEnabled: boolean;
            isAIHVirtualization: boolean;
            isDesktopMaxSessionLimitsEnabled: boolean;
            isAIDFixedVariablesEnabled: boolean;
            isAnalyzerNewUxEnabled: boolean;
            isCallbackRetryEnabled: boolean;
            isWebRTCEnabled: boolean;
            isDesktopRemoveOlhEnabled: boolean;
            isProgressiveCampaignEnabled: boolean;
            isUglyAqmFallbackEnabled: boolean;
        };
        type WxmCred = {
            apiKey: string;
            wxmUser: string;
        };
        type WxmUserParams = {
            spaceId: string;
            metricId: string;
        };
    }
}
export declare const app: ModuleApp;
