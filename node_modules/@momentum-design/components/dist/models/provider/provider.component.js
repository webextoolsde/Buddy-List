import { ContextProvider } from '@lit/context';
import { html } from 'lit';
import Component from '../component';
import styles from './provider.styles';
/**
 * Provider Component class to ultimately be inherited by all Provider-type Web
 * Components within this package.
 *
 * @public
 */
class Provider extends Component {
    /**
     * Constructor of the Provider.
     *
     * Execute in the constructor of the provider implementation,
     * like so
     *
     * ```
     * constructor() {
     *   super(TAG_NAME, {initialValue: new ContextClass(defaultValues)});
     * }
     * ```
     * @param host - host of where the context will be hooked onto, e.g. this
     * @param context - context (returned by createContext)
     * @param initialValue - initialValue of the ContextClass, like `new ContextClass(defaultValues)`
     */
    constructor({ context, initialValue }) {
        super();
        this.context = new ContextProvider(this, {
            context,
            initialValue,
        });
    }
    /**
     * Render this Provider.
     *
     * @remarks
     * This method calls `updateContext()` then validates whether or not to
     * update all consumers based on the results of the `shouldUpdateConsumers`
     * getter.
     *
     * @returns - This Provider as an HTML Element.
     */
    render() {
        this.updateContext();
        return html `<slot></slot>`;
    }
}
/**
 * Styles associated with this Provider Component.
 */
Provider.styles = [...Component.styles, styles];
export default Provider;
