import { CSSResult, nothing, PropertyValueMap } from 'lit';
import FormfieldWrapper from '../formfieldwrapper';
import type { IconNames } from '../icon/icon.types';
import type { AutoCapitalizeType } from './input.types';
declare const Input_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DataAriaLabelMixin").DataAriaLabelMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/ValueMixin").ValueMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/NameMixin").NameMixinInterface> & typeof FormfieldWrapper;
/**
 * mdc-input is a component that allows users to input text.
 *  It contains:
 * - label field - describe the input field.
 * - input field - contains the value
 * - help text or validation message - displayed below the input field.
 * - trailing button - it displays a clear the input field.
 * - prefix text - displayed before the input field.
 * - leading icon - displayed before the input field.
 * - clear-aria-label - aria label for the trailing button.
 * - all the attributes of the input field.
 *
 * @tagname mdc-input
 *
 * @dependency mdc-icon
 * @dependency mdc-text
 * @dependency mdc-button
 *
 * @cssproperty --mdc-input-disabled-border-color - Border color for the input container when disabled
 * @cssproperty --mdc-input-disabled-text-color - Text color for the input field when disabled
 * @cssproperty --mdc-input-disabled-background-color - Background color for the input field when disabled
 * @cssproperty --mdc-input-border-color - Border color for the input container
 * @cssproperty --mdc-input-text-color - Text color for the input field
 * @cssproperty --mdc-input-background-color - Background color for the input field
 * @cssproperty --mdc-input-selection-background-color - Background color for the selected text
 * @cssproperty --mdc-input-selection-text-color - Text color for the selected text
 * @cssproperty --mdc-input-support-text-color - Text color for the help text
 * @cssproperty --mdc-input-hover-background-color - Background color for the input field when hovered
 * @cssproperty --mdc-input-focused-background-color - Background color for the input field when focused
 * @cssproperty --mdc-input-focused-border-color - Border color for the input container when focused
 * @cssproperty --mdc-input-error-border-color - Border color for the input container when error
 * @cssproperty --mdc-input-warning-border-color - Border color for the input container when warning
 * @cssproperty --mdc-input-success-border-color - Border color for the input container when success
 * @cssproperty --mdc-input-primary-border-color - Border color for the input container when primary
 *
 */
declare class Input extends Input_base {
    /**
     * The placeholder text that is displayed when the input field is empty.
     */
    placeholder: string;
    /**
     * readonly attribute of the input field. If true, the input field is read-only.
     */
    readonly: boolean;
    /**
     * The prefix text that is displayed before the input field. It has a max length of 10 characters.
     * When the prefix text is set, make sure to set the 'data-aria-label'
     * attribute with the appropriate value for accessibility.
     */
    prefixText?: string;
    /**
     * The leading icon that is displayed before the input field.
     */
    leadingIcon?: IconNames;
    /**
     * The trailing button when set to true, shows a clear button that clears the input field.
     * @default false
     */
    trailingButton: boolean;
    /**
     * The maximum number of characters that the input field can accept.
     */
    maxlength?: number;
    /**
     * The minimum number of characters that the input field can accept.
     */
    minlength?: number;
    /**
     * The autocapitalize attribute of the input field.
     * @default 'off'
     */
    autocapitalize: AutoCapitalizeType;
    /**
     * The autocomplete attribute of the input field.
     * @default 'off'
     */
    autocomplete: any;
    /**
     * If true, the input field is focused when the component is rendered.
     * @default false
     */
    autofocus: boolean;
    /**
     * Specifies the name of the directionality of text for submission purposes (e.g., "rtl" for right-to-left).
     */
    dirname?: string;
    /**
     * The pattern attribute of the input field.
     * Specifies a regular expression that the input value must match for validation purposes.
     */
    pattern?: string;
    /**
     * The list attribute of the input field.
     * Identifies a list of pre-defined options to suggest to the user.
     */
    list?: string;
    /**
     * The size attribute of the input field.
     * Specifies the width of the input field.
     * @default undefined
     */
    size?: number | undefined;
    /**
     * Aria label for the trailing button. If trailing button is set to true, this label is used for the clear button.
     * @default ''
     */
    clearAriaLabel: string;
    checkValidity(): boolean;
    reportValidity(): boolean;
    /** @internal */
    private internals;
    /** @internal */
    static formAssociated: boolean;
    /** @internal */
    get form(): HTMLFormElement | null;
    constructor();
    /**
   * @internal
   * The input element
   */
    private inputElement;
    connectedCallback(): void;
    protected updated(changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    /**
   * Handles the value change of the input field.
   * Sets the form value and updates the validity of the input field.
   * @returns void
   */
    handleValueChange(): void;
    /**
   * This function is called when the attribute changes.
   * It updates the validity of the input field based on the input field's validity.
   *
   * @param name - attribute name
   * @param old - old value
   * @param value - new value
   */
    attributeChangedCallback(name: string, old: string | null, value: string | null): void;
    /**
   * Sets the validity of the input field based on the input field's validity.
   * @returns void
   */
    private setValidityFromInput;
    /**
   * Updates the value of the input field.
   * Sets the form value.
   * @returns void
   */
    private updateValue;
    /**
   * Handles the input event of the input field.
   * Updates the value and sets the validity of the input field.
   *
   */
    private onInput;
    /**
   * Handles the change event of the input field.
   * Updates the value and sets the validity of the input field.
   *
   * The 'change' event does not bubble up through the shadow DOM as it was not composed.
   * Therefore, we need to re-dispatch the same event to ensure it is propagated correctly.
   * Read more: https://developer.mozilla.org/en-US/docs/Web/API/Event/composed
   *
   * @param event - Event which contains information about the value change.
   */
    private onChange;
    /**
     * Handles the keydown event of the input field.
     * If the key pressed is 'Enter', it submits the form.
     * @param event - Keyboard event
     */
    private handleKeyDown;
    /**
   * Renders the leading icon before the input field.
   * If the leading icon is not set, it will not be displayed.
   *
   * @returns void
   */
    protected renderLeadingIcon(): import("lit-html").TemplateResult<1> | typeof nothing;
    /**
   * Renders the prefix text before the input field.
   * If the prefix text is more than 10 characters,
   * - it will not be displayed.
   * - the validation messsage will be displayed.
   *
   *  Note: We are setting aria-hidden so that the screen reader does not read the prefix text.
   *  The consumers should set the appropriate aria-label for the input field using 'data-aria-label' attribute.
   * @returns void
   */
    protected renderPrefixText(): import("lit-html").TemplateResult<1> | typeof nothing;
    /**
   * Clears the input field.
   */
    private clearInputText;
    /**
   * Renders the trailing button to clear the input field if the trailingButton is set to true.
   * @returns void
   */
    protected renderTrailingButton(): import("lit-html").TemplateResult<1> | typeof nothing;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Input;
