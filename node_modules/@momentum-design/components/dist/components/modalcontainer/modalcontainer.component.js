var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import styles from './modalcontainer.styles';
import { Component } from '../../models';
import { DEFAULTS } from './modalcontainer.constants';
/**
 * The `mdc-modalcontainer` component is an element used to
 * display a modal container that can further be used in popover.
 *
 * @tagname mdc-modalcontainer
 *
 * @cssproperty --mdc-modalcontainer-primary-background-color - primary background color of the modalcontainer
 * @cssproperty --mdc-modalcontainer-border-color - border color of the modalcontainer
 * @cssproperty --mdc-modalcontainer-inverted-background-color - inverted background color of the modalcontainer
 * @cssproperty --mdc-modalcontainer-inverted-border-color - inverted border color of the modalcontainer
 * @cssproperty --mdc-modalcontainer-inverted-text-color - inverted text color of the modalcontainer
 *
 * @slot - Default slot for modal container
 */
class Modalcontainer extends Component {
    constructor() {
        super(...arguments);
        /**
         * Color of the modalcontainer
         * - **tonal**
         * - **contrast**
         * @default tonal
         */
        this.color = DEFAULTS.COLOR;
        /**
         * Elevation of the modalcontainer where each value corresponds to a different drop shadow.
         * - **0**
         * - **1**
         * - **2**
         * - **3**
         * - **4**
         * @default 0
         */
        this.elevation = DEFAULTS.ELEVATION;
        /**
         * Role of the modalcontainer
         * @default dialog
         */
        this.role = DEFAULTS.ROLE;
    }
    render() {
        return html `
      <div 
        id='mdc-modal-container' 
        class='mdc-modal-container'  
        ?contrast="${this.color === 'contrast'}"
        role="${this.role}"
        aria-modal='true'
        aria-label=${ifDefined(this.ariaLabel)}
        data-elevation="${this.elevation}"
        >
        <slot></slot>
      </div>
      `;
    }
}
Modalcontainer.styles = [...Component.styles, ...styles];
__decorate([
    property({ type: String, reflect: true }),
    __metadata("design:type", String)
], Modalcontainer.prototype, "color", void 0);
__decorate([
    property({ type: Number, reflect: true }),
    __metadata("design:type", Number)
], Modalcontainer.prototype, "elevation", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], Modalcontainer.prototype, "role", void 0);
export default Modalcontainer;
