import type { PropertyValues } from 'lit';
import { CSSResult } from 'lit';
import { Component } from '../../models';
import type { ButtonSize, ButtonType } from './buttonsimple.types';
declare const Buttonsimple_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/TabIndexMixin").TabIndexMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DisabledMixin").DisabledMixinInterface> & typeof Component;
/**
 * `mdc-buttonsimple` is a component that can be configured in various ways to suit different use cases.
 * It is used as an internal component and is not intended to be used directly by consumers.
 * Consumers should use the `mdc-button` component instead.
 *
 * @tagname mdc-buttonsimple
 */
declare class Buttonsimple extends Buttonsimple_base {
    /**
     * The button's active state indicates whether it is currently toggled on (active) or off (inactive).
     * When the active state is true, the button is considered to be in an active state, meaning it is toggled on.
     * Conversely, when the active state is false, the button is in an inactive state, indicating it is toggled off.
     * @default false
     */
    active: boolean;
    /**
     * Indicates whether the button is soft disabled.
     * When set to `true`, the button appears visually disabled but still allows
     * focus, click, and keyboard actions to be passed through.
     *
     * **Important:** When using soft disabled, consumers must ensure that
     * the button behaves like a disabled button, allowing only focus and
     * preventing any interactions (clicks or keyboard actions) from triggering unintended actions.
     * @default false
     */
    softDisabled: boolean;
    /**
     * Simplebutton size is a super set of all the sizes supported by children components.
     * @default 32
     */
    size: ButtonSize;
    /**
     * This property defines the ARIA role for the element. By default, it is set to 'button'.
     * Consumers should override this role when:
     * - The element is being used in a context where a different role is more appropriate.
     * - Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.
     * @default button
     */
    role: string;
    /**
     * This property defines the type attribute for the button element.
     * The type attribute specifies the behavior of the button when it is clicked.
     * - **submit**: The button submits the form data to the server.
     * - **reset**: The button resets the form data to its initial state.
     * - **button**: The button does nothing when clicked.
     * @default button
     */
    type: ButtonType;
    /**
     * @internal
     */
    private prevTabindex;
    /** @internal */
    static formAssociated: boolean;
    /** @internal */
    private internals;
    /** @internal */
    get form(): HTMLFormElement | null;
    constructor();
    update(changedProperties: PropertyValues): void;
    protected executeAction(): void;
    /**
     * Sets the aria-pressed attribute based on the active state of the button.
     * @param element - The button element
     * @param active - The active state of the element
     */
    protected setActive(element: HTMLElement, active: boolean): void;
    /**
     * Sets the soft-disabled attribute for the button.
     * When soft-disabled, the button looks to be disabled but remains focusable and clickable.
     * Also sets/removes aria-disabled attribute.
     *
     * @param element - The button element.
     * @param softDisabled - The soft-disabled state.
     */
    private setSoftDisabled;
    /**
     * Sets the disabled attribute for the button.
     * When disabled, the button is not focusable or clickable, and tabindex is set to -1.
     * The previous tabindex is stored and restored when enabled.
     * Also sets/removes aria-disabled attribute.
     *
     * @param element - The button element.
     * @param disabled - The disabled state.
     */
    private setDisabled;
    private triggerClickEvent;
    /**
     * Handles the keydown event on the button.
     * If the key is 'Enter' or 'Space', the button is pressed.
     * If the key is 'Enter', the button is pressed. The native HTML button works in the same way.
     *
     * @param event - The keyboard event.
     */
    private handleKeyDown;
    /**
     * Handles the keyup event on the button.
     * If the key is 'Enter' or 'Space', the button is clicked.
     * If the key is 'Space', the button is pressed. The native HTML button works in the same way.
     *
     * @param event - The keyboard event.
     */
    private handleKeyUp;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Buttonsimple;
