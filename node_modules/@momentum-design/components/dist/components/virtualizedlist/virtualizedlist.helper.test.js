var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property, state } from 'lit/decorators.js';
import { ref } from 'lit/directives/ref.js';
import { styleMap } from 'lit/directives/style-map.js';
import { Component } from '../../models';
class VirtualizedWrapper extends Component {
    constructor() {
        super();
        this.virtualizerprops = { count: 100, estimateSize: () => 100, overscan: 60 };
        this.list = html ``;
        this.listItemTexts = new Array(this.virtualizerprops.count)
            .fill(true)
            .map((_, index) => `list item number ${index}`);
        this.onscroll = null;
        this.setListData = this.setListData.bind(this);
    }
    update(changedProperties) {
        super.update(changedProperties);
        if (changedProperties.get('virtualizerprops')) {
            this.updateListItemTextArray();
        }
    }
    connectedCallback() {
        var _a;
        super.connectedCallback();
        if ((_a = this.virtualizerprops) === null || _a === void 0 ? void 0 : _a.count) {
            this.updateListItemTextArray();
        }
    }
    updateListItemTextArray() {
        var _a;
        this.listItemTexts = new Array((_a = this.virtualizerprops) === null || _a === void 0 ? void 0 : _a.count)
            .fill(true)
            .map((_, index) => `list item number ${index}`);
    }
    setListData({ virtualItems, measureElement, listStyle }) {
        if (virtualItems) {
            this.list = html `<ul style="margin: 0;${styleMap(listStyle)}">${virtualItems.map((virtualItem) => html `<li role="listitem" key=${virtualItem.key} data-index=${virtualItem.index} ref=${ref(measureElement)}>
          ${this.listItemTexts[virtualItem.index]}</li>`)}</ul>`;
        }
    }
    render() {
        return html `
    <div style="height: 500px; width: 500px;">
      <mdc-virtualizedlist
        .onscroll=${this.onscroll}
        .virtualizerprops=${this.virtualizerprops}
        .setlistdata=${this.setListData}
      >${this.list}</mdc-virtualizedlist></div>
    `;
    }
}
VirtualizedWrapper.styles = Component.styles;
__decorate([
    property({ type: Function, attribute: 'onscroll' }),
    __metadata("design:type", Object)
], VirtualizedWrapper.prototype, "onscroll", void 0);
__decorate([
    property({ type: Object, attribute: 'virtualizerprops' }),
    __metadata("design:type", Object)
], VirtualizedWrapper.prototype, "virtualizerprops", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], VirtualizedWrapper.prototype, "list", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], VirtualizedWrapper.prototype, "listItemTexts", void 0);
VirtualizedWrapper.register('mdc-virtualizedwrapper');
