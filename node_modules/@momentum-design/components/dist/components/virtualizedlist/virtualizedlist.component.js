var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { VirtualizerController } from '@tanstack/lit-virtual';
import { property } from 'lit/decorators.js';
import { createRef, ref } from 'lit/directives/ref.js';
import styles from './virtualizedlist.styles';
import { Component } from '../../models';
import { DEFAULTS } from './virtualizedlist.constants';
/**
 * `mdc-virtualizedlist` component for creating custom virtualized lists.
 * IMPORTANT: This component does not create it's own list/list items.
 * Use the setlistdata callback prop to update client state in order to
 * Pass list/listitems as a child of this component, which this will virtuailze
 * This implementation handles dynamic lists as well as fixed sized lists.
 * Please refer to [Tanstack Virtual Docs](https://tanstack.com/virtual/latest) for more in depth documentation.
 *
 * @tagname mdc-virtualizedlist
 *
 * @slot - Client side List with nested list items.
 */
class VirtualizedList extends Component {
    constructor() {
        super();
        /**
         * Object that sets and updates the virtualizer with any relevant props.
         * There are two required object props in order to get virtualization to work properly.
         * count - The length of your list that you are virtualizing.
         * As your list grows/shrinks, this component must be updated with the appropriate value
         * (Same with any other updated prop).
         * estimateSize - A function that returns the estimated size of your items.
         * If your list is fixed, this will just be the size of your items.
         * If your list is dynamic, try to return approximate the size of each item.
         *
         * A full list of possible props can be in
         * [Tanstack Virtualizer API Docs](https://tanstack.com/virtual/latest/docs/api/virtualizer)
         *
         */
        this.virtualizerprops = DEFAULTS.VIRTUALIZER_PROPS;
        this.scrollElementRef = createRef();
        this.virtualizerController = null;
        this.virtualizer = null;
        this.setlistdata = null;
        this.onscroll = null;
    }
    /**
     * This override is necessary to update the virtualizer with relevant props
     * if the client updates any props (most commonly, count). Updating the options
     * this way ensures we don't initialize a new virtualizer upon very prop change.
     */
    update(changedProperties) {
        var _a;
        super.update(changedProperties);
        // if the virtuailzer props change at all,
        // update virtuailzer with the union of the two virtualizer options (current, passed in).
        if (changedProperties.get('virtualizerprops')) {
            (_a = this.virtualizer) === null || _a === void 0 ? void 0 : _a.setOptions({ ...this.virtualizer.options, ...this.virtualizerprops });
            this.requestUpdate();
        }
    }
    connectedCallback() {
        var _a;
        this.virtualizerController = new VirtualizerController(this, {
            count: this.virtualizerprops.count,
            estimateSize: (_a = this.virtualizerprops) === null || _a === void 0 ? void 0 : _a.estimateSize,
            getScrollElement: () => this.scrollElementRef.value || null,
            ...this.virtualizerprops,
        });
        super.connectedCallback();
    }
    /**
     * @internal
     * Renders the list wrapper and invokes the callback which eventually will render in the slot.
     * Uses getTotalSize to update the height of the wrapper. This value is equal to the total size
     * OR the total estimated size (if you haven't physically scrolled the entire list)
     * Passes the virtualItems, measureElement, and listStyle to callback for client to pass in as child
     *
     * @returns The template result containing the list wrapper.
     */
    getVirtualizedListWrapper(virtualizerController) {
        var _a, _b;
        this.virtualizer = virtualizerController.getVirtualizer();
        const { getVirtualItems, measureElement, getTotalSize } = this.virtualizer;
        const virtualItems = getVirtualItems();
        // this style is required to be rendered by the client side list in order to handle scrolling properly
        const listStyle = {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            transform: `translateY(${(_b = (_a = virtualItems[0]) === null || _a === void 0 ? void 0 : _a.start) !== null && _b !== void 0 ? _b : 0}px)`,
        };
        // pass back data to client for rendering
        if (this.setlistdata) {
            this.setlistdata({ virtualItems, measureElement, listStyle });
        }
        return html `<div
          class="mdc-virtualizedlist-container"
          style="height: ${getTotalSize()}px;"
        >
          <slot></slot>
        </div>`;
    }
    render() {
        return html `<div
      ${ref(this.scrollElementRef)}
      class="mdc-virtualizedlist-scroll"
      @scroll=${this.onscroll && this.onscroll}
    >
      ${this.virtualizerController ? this.getVirtualizedListWrapper(this.virtualizerController) : html ``}
    </div>
  `;
    }
}
VirtualizedList.styles = [...Component.styles, ...styles];
__decorate([
    property({ type: Function, attribute: 'onscroll' }),
    __metadata("design:type", Object)
], VirtualizedList.prototype, "onscroll", void 0);
__decorate([
    property({ type: Object, attribute: 'virtualizerprops' }),
    __metadata("design:type", Object)
], VirtualizedList.prototype, "virtualizerprops", void 0);
__decorate([
    property({ type: Function, attribute: 'setlistdata' }),
    __metadata("design:type", Object)
], VirtualizedList.prototype, "setlistdata", void 0);
export default VirtualizedList;
