import { Provider } from '../../models';
import IconProviderContext from './iconprovider.context';
/**
 * IconProvider component, which allows to be consumed from sub components
 * (see `providerUtils.consume` for how to consume)
 *
 * Bundling icons will be up to the consumer of this component, such
 * that only a url has to be passed in from which the icons will be
 * fetched.
 *
 * If `cacheStrategy` is provided, the IconProvider will cache the icons
 * in the selected cache (either web-api-cache or in-memory-cache),
 * to avoid fetching the same icon multiple times over the network.
 * This is useful when the same icon is used multiple times in the application.
 * To consider:
 * - The `in-memory-cache` is not persisted and will be lost when the
 * IconProvider is removed from the DOM.
 * - The `web-api-cache` is persisted, but only works in https environments
 * (https://developer.mozilla.org/en-US/docs/Web/API/Cache).
 *
 * @tagname mdc-iconprovider
 *
 * @slot - children
 */
declare class IconProvider extends Provider<IconProviderContext> {
    constructor();
    /**
     * Context object of the IconProvider, to be consumed by child components
     */
    static get Context(): {
        /**
         * IconProvider component, which allows to be consumed from sub components
         * (see `providerUtils.consume` for how to consume)
         *
         * Bundling icons will be up to the consumer of this component, such
         * that only a url has to be passed in from which the icons will be
         * fetched.
         *
         * If `cacheStrategy` is provided, the IconProvider will cache the icons
         * in the selected cache (either web-api-cache or in-memory-cache),
         * to avoid fetching the same icon multiple times over the network.
         * This is useful when the same icon is used multiple times in the application.
         * To consider:
         * - The `in-memory-cache` is not persisted and will be lost when the
         * IconProvider is removed from the DOM.
         * - The `web-api-cache` is persisted, but only works in https environments
         * (https://developer.mozilla.org/en-US/docs/Web/API/Cache).
         *
         * @tagname mdc-iconprovider
         *
         * @slot - children
         */
        __context__: IconProviderContext;
    };
    /**
     * Url of where icons will be fetched from
     */
    url?: string;
    /**
     * File extension of icons
     * @default svg
     */
    fileExtension?: string;
    /**
     * Length unit used for sizing of icons
     * @default em
     */
    lengthUnit: string;
    /**
     * The default size of the icon.
     * If not set, it falls back to the size defined by the length unit.
     * @default 1
     */
    size?: number;
    /**
     * Icons Cache Strategy to use
     *
     * Choose `in-memory-cache` to cache icons in a JS cache (in-memory cache).
     * Choose `web-cache-api` to cache icons using the Web Cache API.
     *
     * NOTE: `cache-name` must be provided if `cache-strategy` is provided.
     *
     * If not provided or invalid value provided, the icons will not be cached.
     * @default undefined
     */
    cacheStrategy?: 'in-memory-cache' | 'web-cache-api';
    /**
     * Icons Cache Name to use
     *
     * If provided, Icons inside the provider will be cached in the
     * cache (determined by `cache-strategy`) with the provided name.
     *
     * NOTE: `cache-name` requires `cache-strategy` to be set.
     *
     * If not provided, the icons will not be cached.
     * @default undefined
     */
    cacheName?: string;
    private updateValuesInContext;
    protected updateContext(): void;
}
export default IconProvider;
