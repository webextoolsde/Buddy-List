import { CSSResult, PropertyValues } from 'lit';
import FormfieldWrapper from '../formfieldwrapper/formfieldwrapper.component';
declare const Radio_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/NameMixin").NameMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/ValueMixin").ValueMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DataAriaLabelMixin").DataAriaLabelMixinInterface> & typeof FormfieldWrapper;
/**
 * Radio allow users to select single options from a list or turn an item/feature on or off.
 * These are often used in forms, settings, and selection in lists.
 *
 * A radio component contains an optional label, optional info icon and an optional helper text.
 * @dependency mdc-formfieldwrapper
 *
 * @tagname mdc-radio
 *
 * @cssproperty --mdc-radio-inner-circle-size - size of the inner circle
 * @cssproperty --mdc-radio-text-disabled-color - color of the label when disabled
 * @cssproperty --mdc-radio-disabled-border-color - color of the radio button border when disabled
 * @cssproperty --mdc-radio-normal-border-color - color of the radio button border when normal
 * @cssproperty --mdc-radio-inner-circle-normal-background - background color of the inner circle when normal
 * @cssproperty --mdc-radio-inner-circle-disabled-background - background color of the inner circle when disabled
 * @cssproperty --mdc-radio-control-inactive-color - color of the radio button when inactive
 * @cssproperty --mdc-radio-control-inactive-hover - color of the radio button when inactive and hovered
 * @cssproperty --mdc-radio-control-inactive-pressed-color - color of the radio button when inactive and pressed
 * @cssproperty --mdc-radio-control-inactive-disabled-background - background color of the radio button when
 *  inactive and disabled
 * @cssproperty --mdc-radio-control-active-color - color of the radio button when active
 * @cssproperty --mdc-radio-control-active-hover-color - color of the radio button when active and hovered
 * @cssproperty --mdc-radio-control-active-pressed-color - color of the radio button when active and pressed
 * @cssproperty --mdc-radio-control-active-disabled-background - background color of the radio button
 *  when active and disabled
 *
 */
declare class Radio extends Radio_base {
    /**
    * Determines whether the radio is selected or unselected.
    *
    * @default false
    */
    checked: boolean;
    /**
    * Determines whether the radio is read-only.
    *
    * @default false
    */
    readonly: boolean;
    /** @internal */
    private internals;
    /** @internal */
    static formAssociated: boolean;
    /** @internal */
    get form(): HTMLFormElement | null;
    constructor();
    /**
     * Updates the form value to reflect the current state of the radio.
     * If checked, the value is set to the user-provided value.
     * If unchecked, the value is set to null.
     */
    private setFormValue;
    firstUpdated(): void;
    /**
     * Returns all radios within the same group (name).
     */
    private getAllRadiosWithinSameGroup;
    /**
     * The 'change' event does not bubble up through the shadow DOM as it was not composed.
     * Therefore, we need to re-dispatch the same event to ensure it is propagated correctly.
     * Read more: https://developer.mozilla.org/en-US/docs/Web/API/Event/composed
     */
    private dispatchChangeEvent;
    /**
     * Handles the change event on the radio element.
     * This will toggle the state of the radio element.
     * Dispatches the change event.
     */
    private handleChange;
    /**
     * Updates the state of the radio button at the specified index within the enabled radios.
     * Focuses the radio button and triggers the change event if the radio button is not read-only.
     *
     * @param enabledRadios - An array of enabled radio buttons within the same group.
     * @param index - The index of the radio button to be updated within the enabled radios array.
     * @param event - The event that triggered the update.
     */
    private updateRadio;
    /**
     * Handles the keydown event (Arrow Up/Down/Left/Right) on the radio element.
     */
    private handleKeyDown;
    /**
     * Update tab index for all radios in the same group (name)
     * If any radio group is checked, it will have a tab index of 0
     * If no radio group is checked, the first enabled radio will have a tab index of 0
     */
    private updateTabIndex;
    update(changedProperties: PropertyValues): void;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Radio;
