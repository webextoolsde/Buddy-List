import type { PropertyValues } from 'lit';
import { CSSResult } from 'lit';
import Buttonsimple from '../buttonsimple/buttonsimple.component';
import type { ButtonColor, ButtonVariant, IconButtonSize, PillButtonSize } from './button.types';
/**
 * `mdc-button` is a component that can be configured in various ways to suit different use cases.
 *
 * Button Variants:
 * - **Primary**: Solid background color.
 * - **Secondary**: Transparent background with a solid border.
 * - **Tertiary**: No background or border, appears as plain text but retains all button functionalities.
 *
 * Button Colors:
 * - **Positive**: Green color.
 * - **Negative**: Red color.
 * - **Accent**: Blue color.
 * - **Promotional**: Purple color.
 * - **Default**: White color.
 *
 * Button Sizes (in REM units):
 * - **Pill button**: 40, 32, 28, 24.
 * - **Icon button**: 64, 52, 40, 32, 28, 24.
 * - **Tertiary icon button**: 20.
 *
 * Button Types:
 * - **Pill button**: A button that contains text value. Commonly used for call to action, tags, or filters.
 * - **Pill button with icons**: A button containing an icon either on the left or right side of the button.
 * - **Icon button**: A button represented by just an icon without any text.
 * The type of button is inferred based on the presence of slot and/or prefix and postfix icons.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-button
 *
 * @slot - Text label of the button.
 */
declare class Button extends Buttonsimple {
    /**
     * The name of the icon to display as a prefix.
     * The icon is displayed on the left side of the button.
     */
    prefixIcon?: string;
    /**
     * The name of the icon to display as a postfix.
     * The icon is displayed on the right side of the button.
     */
    postfixIcon?: string;
    /**
     * There are 3 variants of button: primary, secondary, tertiary. They are styled differently.
     * - **Primary**: Solid background color.
     * - **Secondary**: Transparent background with a solid border.
     * - **Tertiary**: No background or border, appears as plain text but retains all button functionalities.
     * @default primary
     */
    variant: ButtonVariant;
    /**
     * Button sizing is based on the button type.
     * - **Pill button**: 40, 32, 28, 24.
     * - **Icon button**: 64, 52, 40, 32, 28, 24.
     * - Tertiary icon button can also be 20.
     * @default 32
     */
    size: PillButtonSize | IconButtonSize;
    /**
     * There are 5 colors for button: positive, negative, accent, promotional, default.
     * @default default
     */
    color: ButtonColor;
    /**
     * This property defines the ARIA role for the element. By default, it is set to 'button'.
     * Consumers should override this role when:
     * - The element is being used in a context where a different role is more appropriate.
     * - Custom behaviors are implemented that require a specific ARIA role for accessibility purposes.
     * @default button
     */
    role: string;
    /** @internal */
    private typeInternal;
    /** @internal */
    private iconSize;
    /**
     * @internal
     */
    private prevPrefixIcon?;
    /**
     * @internal
     */
    private prevPostfixIcon?;
    update(changedProperties: PropertyValues): void;
    /**
     * Modifies the icon name based on the active state.
     * If the button is active, the icon name is suffixed with '-filled'.
     * If the button is inactive, the icon name is restored to its original value.
     * If '-filled' icon is not available, the icon name remains unchanged.
     *
     * @param active - The active state.
     */
    private modifyIconName;
    /**
     * Sets the variant attribute for the button component.
     * If the provided variant is not included in the BUTTON_VARIANTS,
     * it defaults to the value specified in DEFAULTS.VARIANT.
     *
     * @param variant - The variant to set.
     */
    private setVariant;
    /**
     * Sets the size attribute for the button component.
     * Validates the size based on the button type (icon, pill, or tertiary).
     * Defaults to DEFAULTS.SIZE if invalid.
     *
     * @param size - The size to set.
     */
    private setSize;
    /**
     * Sets the color attribute for the button.
     * Defaults to DEFAULTS.COLOR if invalid or for tertiary buttons.
     *
     * @param color - The color to set.
     */
    private setColor;
    /**
     * Infers the type of button based on the presence of slot and/or prefix and postfix icons.
     * @param slot - default slot of button
     */
    private inferButtonType;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Button;
