import { CSSResult, PropertyValueMap } from 'lit';
import FormfieldWrapper from '../formfieldwrapper';
import { ToggleSize } from './toggle.types';
declare const Toggle_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/NameMixin").NameMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/ValueMixin").ValueMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DataAriaLabelMixin").DataAriaLabelMixinInterface> & typeof FormfieldWrapper;
/**
 * Toggle Component is an interactive control used to switch between two mutually exclusive options,
 * such as On/Off, Active/Inactive. These are commonly used in settings panels, forms, and preference selections
 * where users need to enable or disable a feature.
 * It contains an optional label and an optional helper text.
 *
 * To create a group of toggles, use the FormFieldGroup component.
 *
 * Note: It internally renders a checkbox styled as a toggle switch.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-toggle
 *
 * @cssproperty --mdc-toggle-width - width of the toggle
 * @cssproperty --mdc-toggle-height - height of the toggle
 * @cssproperty --mdc-toggle-width-compact - width of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-height-compact - height of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-border-radius - border radius of the toggle
 * @cssproperty --mdc-toggle-border-radius-compact - border radius of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-border - border of the toggle
 * @cssproperty --mdc-toggle-inactive-rest-color - background color of the inactive toggle in rest state
 * @cssproperty --mdc-toggle-inactive-hover-color - background color of the inactive toggle in hover state
 * @cssproperty --mdc-toggle-inactive-pressed-color - background color of the inactive toggle in pressed state
 * @cssproperty --mdc-toggle-inactive-disabled-color - background color of the inactive toggle in disabled state
 * @cssproperty --mdc-toggle-active-rest-color - background color of the active toggle in rest state
 * @cssproperty --mdc-toggle-active-hover-color - background color of the active toggle in hover state
 * @cssproperty --mdc-toggle-active-pressed-color - background color of the active toggle in pressed state
 * @cssproperty --mdc-toggle-active-disabled-color - background color of the active toggle in disabled state
 * @cssproperty --mdc-toggle-help-text-color -  color of the help text label
 * @cssproperty --mdc-toggle-label-color-disabled - color of the toggle label and help text in disabled state
 *
 */
declare class Toggle extends Toggle_base {
    /**
    * Determines whether the toggle is active or inactive.
    * @default false
    */
    checked: boolean;
    /**
     * Determines toggle size in rem (height is specified here).
     * - **Default**: 1.5
     * - **Compact**: 1
     * @default default
     */
    size: ToggleSize;
    /** @internal */
    private internals;
    /** @internal */
    static formAssociated: boolean;
    /** @internal */
    get form(): HTMLFormElement | null;
    constructor();
    /**
     * Updates the form value to reflect the current state of the toggle.
     * If toggle is switched on, the value is set to either the user-provided value or 'isActive' if no value is provided.
     * If toggle is switched off, the value is set to null.
     */
    private setFormValue;
    /**
     * Toggles the state of the toggle element.
     * If the element is not disabled, then the checked property is toggled.
     */
    private toggleState;
    /**
     * Toggles the state of the toggle element.
     * and dispatch the new change event.
     */
    private handleChange;
    /**
     * Sets the size attribute for the toggle component.
     * If the provided size is not included in the TOGGLE_SIZE,
     * it defaults to the value specified in DEFAULTS.SIZE.
     *
     * @param size - The size to set.
     */
    private setToggleSize;
    update(changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Toggle;
