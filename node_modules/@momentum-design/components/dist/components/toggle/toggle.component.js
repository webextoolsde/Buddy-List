var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import styles from './toggle.styles';
import FormfieldWrapper from '../formfieldwrapper';
import { ValueMixin } from '../../utils/mixins/ValueMixin';
import { NameMixin } from '../../utils/mixins/NameMixin';
import { DEFAULTS as FORMFIELD_DEFAULTS } from '../formfieldwrapper/formfieldwrapper.constants';
import { DEFAULTS, ICON_NAME, ICON_SIZE_IN_REM, TOGGLE_SIZE } from './toggle.constants';
import { DataAriaLabelMixin } from '../../utils/mixins/DataAriaLabelMixin';
/**
 * Toggle Component is an interactive control used to switch between two mutually exclusive options,
 * such as On/Off, Active/Inactive. These are commonly used in settings panels, forms, and preference selections
 * where users need to enable or disable a feature.
 * It contains an optional label and an optional helper text.
 *
 * To create a group of toggles, use the FormFieldGroup component.
 *
 * Note: It internally renders a checkbox styled as a toggle switch.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-toggle
 *
 * @cssproperty --mdc-toggle-width - width of the toggle
 * @cssproperty --mdc-toggle-height - height of the toggle
 * @cssproperty --mdc-toggle-width-compact - width of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-height-compact - height of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-border-radius - border radius of the toggle
 * @cssproperty --mdc-toggle-border-radius-compact - border radius of the toggle when it's size is compact
 * @cssproperty --mdc-toggle-border - border of the toggle
 * @cssproperty --mdc-toggle-inactive-rest-color - background color of the inactive toggle in rest state
 * @cssproperty --mdc-toggle-inactive-hover-color - background color of the inactive toggle in hover state
 * @cssproperty --mdc-toggle-inactive-pressed-color - background color of the inactive toggle in pressed state
 * @cssproperty --mdc-toggle-inactive-disabled-color - background color of the inactive toggle in disabled state
 * @cssproperty --mdc-toggle-active-rest-color - background color of the active toggle in rest state
 * @cssproperty --mdc-toggle-active-hover-color - background color of the active toggle in hover state
 * @cssproperty --mdc-toggle-active-pressed-color - background color of the active toggle in pressed state
 * @cssproperty --mdc-toggle-active-disabled-color - background color of the active toggle in disabled state
 * @cssproperty --mdc-toggle-help-text-color -  color of the help text label
 * @cssproperty --mdc-toggle-label-color-disabled - color of the toggle label and help text in disabled state
 *
 */
class Toggle extends NameMixin(ValueMixin(DataAriaLabelMixin(FormfieldWrapper))) {
    /** @internal */
    get form() {
        return this.internals.form;
    }
    constructor() {
        super();
        /**
        * Determines whether the toggle is active or inactive.
        * @default false
        */
        this.checked = false;
        /**
         * Determines toggle size in rem (height is specified here).
         * - **Default**: 1.5
         * - **Compact**: 1
         * @default default
         */
        this.size = DEFAULTS.SIZE;
        /** @internal */
        this.internals = this.attachInternals();
        // Toggle does not contain helpTextType property.
        this.helpTextType = undefined;
    }
    /**
     * Updates the form value to reflect the current state of the toggle.
     * If toggle is switched on, the value is set to either the user-provided value or 'isActive' if no value is provided.
     * If toggle is switched off, the value is set to null.
     */
    setFormValue() {
        let actualValue = null;
        if (this.checked) {
            actualValue = !this.value ? 'isActive' : this.value;
        }
        this.internals.setFormValue(actualValue);
    }
    /**
     * Toggles the state of the toggle element.
     * If the element is not disabled, then the checked property is toggled.
     */
    toggleState() {
        if (!this.disabled) {
            this.checked = !this.checked;
        }
    }
    /**
     * Toggles the state of the toggle element.
     * and dispatch the new change event.
     */
    handleChange(event) {
        this.toggleState();
        // Re-dispatch the existing event instead of creating a new one since change event doesn't bubble out of shadow dom
        const EventConstructor = event.constructor;
        this.dispatchEvent(new EventConstructor(event.type, event));
    }
    /**
     * Sets the size attribute for the toggle component.
     * If the provided size is not included in the TOGGLE_SIZE,
     * it defaults to the value specified in DEFAULTS.SIZE.
     *
     * @param size - The size to set.
     */
    setToggleSize(size) {
        this.setAttribute('size', Object.values(TOGGLE_SIZE).includes(size) ? size : DEFAULTS.SIZE);
    }
    update(changedProperties) {
        super.update(changedProperties);
        if (changedProperties.has('checked')) {
            this.setFormValue();
        }
        if (changedProperties.has('size')) {
            this.setToggleSize(this.size);
        }
    }
    render() {
        var _a;
        return html `
        <div class="mdc-toggle__container mdc-focus-ring">
          <input
            id="${this.id}"
            type="checkbox"
            class="mdc-toggle__input"
            role="switch"
            name="${ifDefined(this.name)}"
            value="${ifDefined(this.value)}"
            .checked="${this.checked}"
            .disabled="${this.disabled}"
            aria-describedby="${FORMFIELD_DEFAULTS.HELPER_TEXT_ID}"
            aria-label="${(_a = this.dataAriaLabel) !== null && _a !== void 0 ? _a : ''}"
            tabindex="${this.disabled ? -1 : 0}"
            @change="${this.handleChange}"
          />
          <div class="mdc-toggle__slider">
            <mdc-icon
              name="${this.checked ? ICON_NAME.CHECKED : ICON_NAME.UNCHECKED}"
              class="mdc-toggle__icon"
              length-unit="rem"
              size="${ICON_SIZE_IN_REM[this.size]}"
            ></mdc-icon>
          </div>
        </div>
        ${this.renderLabel()}
        ${this.renderHelperText()}
    `;
    }
}
/** @internal */
Toggle.formAssociated = true;
Toggle.styles = [...FormfieldWrapper.styles, ...styles];
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], Toggle.prototype, "checked", void 0);
__decorate([
    property({ type: String, reflect: true }),
    __metadata("design:type", String)
], Toggle.prototype, "size", void 0);
export default Toggle;
