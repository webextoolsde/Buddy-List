import type { PropertyValues } from 'lit';
import { CSSResult } from 'lit';
import { Component } from '../../models';
import type { Directions, DividerOrientation, DividerVariant } from './divider.types';
/**
 * `mdc-divider` is a component that provides a line to separate and organize content.
 * It can also include a button or text positioned centrally, allowing users to interact with the layout.
 *
 * **Divider Orientation:**
 * - **Horizontal**: A thin, horizontal line.
 * - **Vertical**: A thin, vertical line.
 *
 * **Divider Variants:**
 * - **solid**: Solid line.
 * - **gradient**: Gradient Line.
 *
 * **Divider Types:**
 * - The type of divider is inferred based on the kind of slot present.
 *  - **Primary**: A simple horizontal or vertical divider.
 *  - **Text**: A horizontal divider with a text label in the center.
 *  - **Grabber Button**: A horizontal or vertical divider with a styled button in the center.
 *
 * **Accessibility:**
 * - When the slot is replaced by an `mdc-button`:
 *   - `aria-label` should be passed to the `mdc-button`.
 *   - `aria-expanded` should be passed to the `mdc-button`.
 *
 * **Notes:**
 * - If the slot is replaced by an invalid tag name or contains multiple elements,
 *   the divider defaults to the **Primary** type.
 * - To override the styles of the divider, use the provided CSS custom properties.
 *
 * @tagname mdc-divider
 *
 * @cssproperty --mdc-divider-background-color - background color of the divider
 * @cssproperty --mdc-divider-width - width of the divider
 * @cssproperty --mdc-divider-horizontal-gradient - gradient of the horizontal divider
 * @cssproperty --mdc-divider-vertical-gradient - gradient of the vertical divider
 * @cssproperty --mdc-divider-text-size - font size of label in the text divider
 * @cssproperty --mdc-divider-text-color - font color of label in the text divider
 * @cssproperty --mdc-divider-text-margin - left and right margin of label in the text divider
 * @cssproperty --mdc-divider-text-line-height - line height of label in the text divider
 * @cssproperty --mdc-divider-grabber-button-background-color-normal - background color of the grabber button
 *  in rest state
 * @cssproperty --mdc-divider-grabber-button-background-color-hover - background color of the grabber button
 *  in hover state
 * @cssproperty --mdc-divider-grabber-button-background-color-pressed - background color of the grabber button
 *  in pressed state
 * @cssproperty --mdc-divider-grabber-button-border-color - border color of the grabber button
 * @cssproperty --mdc-divider-grabber-button-border-radius - border radius of the grabber button
 */
declare class Divider extends Component {
    /**
     * Two orientations of divider
     * - **horizontal**: A thin, horizontal line with 0.0625rem width.
     * - **vertical**: A thin, vertical line with 0.0625rem width.
     *
     * Note: We do not support "Vertical Text Divider" as of now.
     * @default horizontal
     */
    orientation: DividerOrientation;
    /**
     * Two variants of divider
     * - **solid**: Solid line.
     * - **gradient**: Gradient Line that fades on either sides of the divider.
     * @default solid
     */
    variant: DividerVariant;
    /**
     * Direction of the arrow icon, if applicable.
     * - **positive**
     * - **negative**
     *
     * Note: Positive and Negative directions are defined based on Cartesian plane.
     * @default 'negative'
     */
    arrowDirection: Directions;
    /**
     * Position of the button, if applicable.
     * - **positive**
     * - **negative**
     *
     * Note: Positive and Negative directions are defined based on Cartesian plane.
     * @default 'negative'
     */
    buttonPosition: Directions;
    /**
     * Sets the variant attribute for the divider component.
     * If the provided variant is not included in the DIVIDER_VARIANT,
     * it defaults to the value specified in DEFAULTS.VARIANT.
     *
     * @param variant - The variant to set.
     */
    private setVariant;
    /**
     * Sets the orientation attribute for the divider component.
     * If the provided orientation is not included in the DIVIDER_ORIENTATION,
     * it defaults to the value specified in DEFAULTS.ORIENTATION.
     *
     * @param orientation - The orientation to set.
     */
    private setOrientation;
    /**
     * Sets the buttonPosition and arrowDirection attribute for the divider component.
     * If the provided buttonPosition and arrowDirection are not included in the DIRECTIONS,
     * it defaults to the value specified in DIRECTIONS based on the ORIENTATION.
     *
     * @param buttonPosition - The buttonPosition to set.
     * @param arrowDirection - The arrowDirection to set.
     */
    private ensureValidDirections;
    /**
     * Configures the grabber button within the divider.
     *
     * - Sets the `prefix-icon` attribute for the grabber button based
     * on the `arrow-direction` and `orientation` properties.
     *
     * This method updates the DOM element dynamically if a grabber button is present.
     */
    private setGrabberButton;
    /**
     * Determines the arrow icon based on the consumer-defined `arrowDirection`.
     *
     * @returns The icon that represents the arrow direction.
     */
    private getArrowIcon;
    update(changedProperties: PropertyValues): void;
    /**
     * Infers the type of divider based on the kind of slot present.
     * @param slot - default slot of divider
     */
    private inferDividerType;
    constructor();
    protected render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Divider;
