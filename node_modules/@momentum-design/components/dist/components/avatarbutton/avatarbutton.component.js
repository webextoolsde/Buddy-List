var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { AvatarComponentMixin } from '../../utils/mixins/AvatarComponentMixin';
import { IconNameMixin } from '../../utils/mixins/IconNameMixin';
import { AVATAR_SIZE, DEFAULTS } from '../avatar/avatar.constants';
import { DEFAULTS as BUTTON_DEFAULTS } from '../button/button.constants';
import Buttonsimple from '../buttonsimple/buttonsimple.component';
import styles from './avatarbutton.styles';
/**
 * The `mdc-avatarbutton` component is an interactable version of the `mdc-avatar` component.
 *
 * This component is made by extending `buttonsimple` class.
 * The button component acts as a wrapper for the avatar component.
 *
 * @dependency mdc-avatar
 *
 * @tagname mdc-avatarbutton
 */
class AvatarButton extends AvatarComponentMixin(IconNameMixin(Buttonsimple)) {
    constructor() {
        super();
        /**
       * Aria-label attribute to be set for accessibility
       */
        this.ariaLabel = null;
        this.active = undefined;
        this.disabled = undefined;
        this.softDisabled = undefined;
        this.role = 'button';
        this.type = BUTTON_DEFAULTS.TYPE;
    }
    update(changedProperties) {
        super.update(changedProperties);
        if (changedProperties.has('size')) {
            this.setSize(this.size);
        }
    }
    setSize(size) {
        this.setAttribute('size', Object.values(AVATAR_SIZE).includes(size) ? `${size}` : DEFAULTS.SIZE.toString());
    }
    render() {
        return html `
      <mdc-avatar
        slot="prefixIcon"
        ?is-typing="${this.isTyping}"
        counter="${ifDefined(this.counter)}"
        icon-name="${ifDefined(this.iconName)}"
        initials="${ifDefined(this.initials)}"
        presence="${ifDefined(this.presence)}"
        size="${ifDefined(this.size)}"
        src="${ifDefined(this.src)}"
      ></mdc-avatar>
    `;
    }
}
AvatarButton.styles = [...styles];
__decorate([
    property({ type: String, attribute: 'aria-label' }),
    __metadata("design:type", Object)
], AvatarButton.prototype, "ariaLabel", void 0);
export default AvatarButton;
