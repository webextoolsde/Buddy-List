import type { PropertyValues, TemplateResult } from 'lit';
import { CSSResult } from 'lit';
import { Component } from '../../models';
declare const Avatar_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/AvatarComponentMixin").AvatarComponentMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/IconNameMixin").IconNameMixinInterface> & typeof Component;
/**
 * The `mdc-avatar` component is used to represent a person or a space.
 * An avatar can be an icon, initials, counter and photo.
 *
 * To set the photo of an avatar,
 * you need to set "src" attribute.
 *
 * While the avatar image is loading, as a placeholder,
 * we will show the initials text.
 * If the initials are not specified then,
 * we will show `user-regular` icon as a placeholder.
 *
 * By default, if there are no attributes specified,
 * then the default avatar will be an icon with `user-regular` name.
 *
 * The avatar component is non clickable and non interactive/focusable component.
 * If the avatar is typing, then the loading indicator will be displayed.
 * If the counter type avatar is set to a negative number, then we will display 0.
 * The presence indicator will be hidden when the counter property is set.
 *
 * @dependency mdc-icon
 * @dependency mdc-presence
 * @dependency mdc-text
 *
 * @tagname mdc-avatar
 *
 * @cssproperty --mdc-avatar-default-background-color - Allows customization of the default background color.
 * @cssproperty --mdc-avatar-default-foreground-color - Allows customization of the default foreground color.
 * @cssproperty --mdc-avatar-loading-indicator-background-color -
 *  Allows customization of the loading indicator background color.
 * @cssproperty --mdc-avatar-loading-indicator-foreground-color -
 *  Allows customization of the loading indicator foreground color.
 * @cssproperty --mdc-avatar-loading-overlay-background-color -
 *  Allows customization of the loading overlay background color.
 */
declare class Avatar extends Avatar_base {
    /**
     * @internal
     */
    private isPhotoLoaded;
    /**
     * @internal
     * The avatar presence will be hidden if the avatar type is COUNTER.
     * If the presence is set, it will be rendered as a child of the avatar.
     *
     * @param type - The type of the avatar.
     * @returns The presence template or an empty template.
     */
    private getPresenceTemplateBasedOnType;
    /**
     * @internal
     * Sets `isPhotoLoaded` to `true` when the avatar photo is loaded.
     * This is used to hide the avatar photo initially and show it only when it is loaded.
     */
    private handleOnLoad;
    /**
     * @internal
     * Handles errors that occur during the image loading process.
     * Sets `isPhotoLoaded` to `false` to indicate the failure and throws an error message.
     * The error message suggests checking the `src` attribute.
     */
    private handleOnError;
    /**
     * @internal
     * Generates the photo template for the avatar component.
     * Utilizes the `src` attribute to display an image.
     * The photo remains hidden until it is fully loaded;
     * upon successful loading, the `handleOnLoad` method sets `isPhotoLoaded` to true.
     * In the event of a loading error, the `handleOnError` method sets `isPhotoLoaded` to false and raises an error.
     *
     * @returns The template result containing the avatar photo.
     */
    private photoTemplate;
    /**
     * @internal
     * Generates the icon template for the photo avatar component.
     * Utilizes the `mdc-icon` component to display an icon.
     * If the `iconName` property is not provided, it defaults to the `DEFAULTS.ICON_NAME`.
     *
     * @returns The template result containing the avatar icon.
     */
    private iconTemplate;
    /**
     * @internal
     * Generates the text template for the initials/counter avatar component.
     * Utilizes the `mdc-text` component to display text.
     *
     * @param content - the text content to be displayed
     * @returns The template result containing the avatar text.
     */
    private textTemplate;
    /**
     * @internal
     * Generates the text content for counter avatar by converting the given number to a string.
     * If the counter exceeds the maximum limit of 99, it will return the maximum limit as a string
     * followed by a '+' character.
     *
     * @param counter - the number to be converted to a string
     * @returns the counter text
     */
    private generateCounterText;
    /**
     * @internal
     * Converts the given initials to uppercase and takes the first two characters.
     * This is used to generate the text content for the initials avatar.
     *
     * @param initials - the string containing the initials
     * @returns the first two uppercase characters of the given initials
     */
    private generateInitialsText;
    /**
     * @internal
     * Generates the text content based on the given type.
     * If the type is TEXT, it will use the initials property and generate the first two uppercase characters.
     * If the type is COUNTER, it uses the value of counter property and
     * generate the string representation of the counter.
     * The generated content is then passed to the `textTemplate` method to generate the final template.
     *
     * @param type - the type of the avatar
     * @returns the template result containing the avatar text
     */
    private generateTextContent;
    /**
     * @internal
     * Returns the type of the avatar component based on the user-provided inputs.
     *
     * @returns the type of the avatar component
     */
    private getTypeBasedOnInputs;
    /**
     * @internal
     * Returns the template result based on the type of the avatar component.
     * The type is determined by `getTypeBasedOnInputs` based on user's input.
     * Based on the generated type, template result is generated.
     *
     * @param type - the type of the avatar component
     * @returns the template result containing the avatar content
     */
    private getTemplateBasedOnType;
    /**
     * @internal
     * Represents the loading indicator for the avatar when typing.
     * If the avatar is in typing state, this method returns a loading indicator
     * comprising three small filled dots, scaled based on the avatar size.
     *
     * @returns The template result containing the loading indicator, or an empty template if not typing.
     */
    private getLoadingContent;
    /**
     * @internal
     * Generates the photo placeholder content for the avatar component.
     * If the photo is not yet loaded, and the avatar type is PHOTO with initials provided,
     * it generates and returns the initials as a placeholder text.
     * If the photo is already loaded, it returns an empty template.
     *
     * @param type - The type of the avatar.
     * @returns The template result containing the placeholder content or an empty template.
     */
    private getPhotoPlaceHolderContent;
    update(changedProperties: PropertyValues): void;
    render(): TemplateResult;
    static styles: Array<CSSResult>;
}
export default Avatar;
