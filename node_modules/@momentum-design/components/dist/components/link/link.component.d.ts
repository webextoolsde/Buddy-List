import type { PropertyValues } from 'lit';
import { CSSResult } from 'lit';
import { Component } from '../../models';
import type { LinkSize } from './link.types';
declare const Link_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DisabledMixin").DisabledMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/IconNameMixin").IconNameMixinInterface> & typeof Component;
/**
 * `mdc-link` component can be used to navigate to a different page
 * within the application or to an external site. It can be used to link to
 * emails or phone numbers.
 *
 * The `children` of the link component is expected to be an anchor element
 * containing the text, href, and other attributes.
 *
 * For `icon`, the `mdc-icon` component is used to render the icon.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-link
 *
 * @cssproperty --mdc-link-border-radius - Border radius of the link
 * @cssproperty --mdc-link-color-active - Text and icon color of the link in active state
 * @cssproperty --mdc-link-color-disabled - Text and icon color of the link in disabled state
 * @cssproperty --mdc-link-color-hover - Text and icon color of the link in hover state
 * @cssproperty --mdc-link-color-normal - Text and icon color of the link in normal state
 * @cssproperty --mdc-link-icon-margin-left - Gap between the text and icon (only applicable when an icon is set)
 * @cssproperty --mdc-link-inverted-color-active - Text and icon color of the inverted link in active state
 * @cssproperty --mdc-link-inverted-color-disabled - Text and icon color of the inverted link in disabled state
 * @cssproperty --mdc-link-inverted-color-hover - Text and icon color of the inverted link in hover state
 * @cssproperty --mdc-link-inverted-color-normal - Text and icon color of the inverted link in normal state
 * @cssproperty --mdc-link-text-decoration-disabled - Text decoration of the link in disabled state for all variants
 */
declare class Link extends Link_base {
    /**
     * The link can be inline or standalone.
     * @default false
     */
    inline: boolean;
    /**
     * The link color can be inverted by setting the inverted attribute to true.
     * @default false
     */
    inverted: boolean;
    /**
     * Size of the link.
     * Acceptable values include:
     *
     * - 'small'
     * - 'midsize'
     * - 'large'
     *
     * @default large
     */
    size: LinkSize;
    /**
     * Used to store the previous tabindex value of the host element
     * null value means that the host element did not have a tabindex attribute.
     * @internal
     */
    private prevTabindex;
    /**
     * Method to get the size of the trailing icon based on the link size.
     * @returns The icon size value and units.
     */
    private getIconSize;
    /**
     * Updates the tabindex of the host element to disable or enable the link.
     * When disabled, the link is not focusable or clickable, and tabindex is set to -1
     * and aria-disabled attribute is set to true
     * When link is not disabled, the previous tabindex of the host element is restored
     * and aria-disabled attribute is removed.
     *
     * @param disabled - The disabled state of icon
     */
    private setDisabled;
    /**
     * Method to create and append trailing icon to the first anchor element in the slot.
     * If no icon name is provided, no icon will be rendered.
     */
    private updateTrailingIcon;
    update(changedProperties: PropertyValues): void;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Link;
