var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { Component } from '../../models';
import { DisabledMixin } from '../../utils/mixins/DisabledMixin';
import { IconNameMixin } from '../../utils/mixins/IconNameMixin';
import { DEFAULTS, LINK_ICON_SIZES, LINK_SIZES } from './link.constants';
import styles from './link.styles';
/**
 * `mdc-link` component can be used to navigate to a different page
 * within the application or to an external site. It can be used to link to
 * emails or phone numbers.
 *
 * The `children` of the link component is expected to be an anchor element
 * containing the text, href, and other attributes.
 *
 * For `icon`, the `mdc-icon` component is used to render the icon.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-link
 *
 * @cssproperty --mdc-link-border-radius - Border radius of the link
 * @cssproperty --mdc-link-color-active - Text and icon color of the link in active state
 * @cssproperty --mdc-link-color-disabled - Text and icon color of the link in disabled state
 * @cssproperty --mdc-link-color-hover - Text and icon color of the link in hover state
 * @cssproperty --mdc-link-color-normal - Text and icon color of the link in normal state
 * @cssproperty --mdc-link-icon-margin-left - Gap between the text and icon (only applicable when an icon is set)
 * @cssproperty --mdc-link-inverted-color-active - Text and icon color of the inverted link in active state
 * @cssproperty --mdc-link-inverted-color-disabled - Text and icon color of the inverted link in disabled state
 * @cssproperty --mdc-link-inverted-color-hover - Text and icon color of the inverted link in hover state
 * @cssproperty --mdc-link-inverted-color-normal - Text and icon color of the inverted link in normal state
 * @cssproperty --mdc-link-text-decoration-disabled - Text decoration of the link in disabled state for all variants
 */
class Link extends DisabledMixin(IconNameMixin(Component)) {
    constructor() {
        super(...arguments);
        /**
         * The link can be inline or standalone.
         * @default false
         */
        this.inline = DEFAULTS.INLINE;
        /**
         * The link color can be inverted by setting the inverted attribute to true.
         * @default false
         */
        this.inverted = DEFAULTS.INVERTED;
        /**
         * Size of the link.
         * Acceptable values include:
         *
         * - 'small'
         * - 'midsize'
         * - 'large'
         *
         * @default large
         */
        this.size = DEFAULTS.LINK_SIZE;
        /**
         * Used to store the previous tabindex value of the host element
         * null value means that the host element did not have a tabindex attribute.
         * @internal
         */
        this.prevTabindex = null;
    }
    /**
     * Method to get the size of the trailing icon based on the link size.
     * @returns The icon size value and units.
     */
    getIconSize() {
        switch (this.size) {
            case LINK_SIZES.SMALL:
                return LINK_ICON_SIZES.SMALL;
            case LINK_SIZES.MIDSIZE:
                return LINK_ICON_SIZES.MIDSIZE;
            default:
                return LINK_ICON_SIZES.LARGE;
        }
    }
    /**
     * Updates the tabindex of the host element to disable or enable the link.
     * When disabled, the link is not focusable or clickable, and tabindex is set to -1
     * and aria-disabled attribute is set to true
     * When link is not disabled, the previous tabindex of the host element is restored
     * and aria-disabled attribute is removed.
     *
     * @param disabled - The disabled state of icon
     */
    setDisabled(disabled) {
        if (disabled) {
            this.prevTabindex = this.hasAttribute('tabindex') ? this.tabIndex : null;
            this.tabIndex = -1;
            this.setAttribute('aria-disabled', 'true');
        }
        else if (this.prevTabindex === null) {
            this.removeAttribute('tabindex');
            this.removeAttribute('aria-disabled');
        }
        else {
            this.tabIndex = this.prevTabindex;
            this.removeAttribute('aria-disabled');
        }
    }
    /**
     * Method to create and append trailing icon to the first anchor element in the slot.
     * If no icon name is provided, no icon will be rendered.
     */
    updateTrailingIcon() {
        var _a, _b;
        const anchorElement = (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot')) === null || _b === void 0 ? void 0 : _b.assignedElements({ flatten: true }).find((element) => element.tagName === 'A');
        const iconSize = this.getIconSize();
        if (this.iconName && anchorElement) {
            const trailingIcon = document.createElement('mdc-icon');
            trailingIcon.setAttribute('name', this.iconName);
            trailingIcon.setAttribute('size', `${iconSize}`);
            trailingIcon.setAttribute('length-unit', 'rem');
            anchorElement.appendChild(trailingIcon);
        }
    }
    update(changedProperties) {
        super.update(changedProperties);
        if (changedProperties.has('disabled')) {
            this.setDisabled(this.disabled);
        }
    }
    render() {
        return html `<slot @slotchange=${this.updateTrailingIcon}></slot>`;
    }
}
Link.styles = [...Component.styles, ...styles];
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Boolean)
], Link.prototype, "inline", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Boolean)
], Link.prototype, "inverted", void 0);
__decorate([
    property({ type: String, reflect: true }),
    __metadata("design:type", String)
], Link.prototype, "size", void 0);
export default Link;
