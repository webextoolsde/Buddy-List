import type { CacheStrategy } from '../../utils/icon-cache';
interface Args {
    url: string;
    name: string;
    fileExtension: string;
    cacheStrategy?: CacheStrategy;
    cacheName?: string;
    renewSignal: () => AbortSignal;
}
/**
 * Fetches a dynamic SVG icon based on the provided `url`, `name` and `fileExtension`.
 * The fetch is aborted if the signal is aborted.
 *
 * This function also includes the logic to cache the fetched icon using the In Memory Cache or Web Cache API.
 * If the `cacheStrategy` is set to `web-cache-api` or `in-memory-cache` and `cacheName` is provided,
 * the fetched icon will be cached using the respective cache.
 *
 * It will throw an error if the response is not ok.
 *
 * @param url - The base url of the icon
 * @param name - The name of the icon
 * @param fileExtension - The file extension of the icon
 * @param signal - The signal to abort the fetch.
 * It is used to cancel the fetch when the component is disconnected or updated.
 * @param cacheStrategy - The cache strategy to use.
 * @param cacheName - The cache name to use.
 *
 * @returns Response string from the fetch
 * @throws Error if the response is not ok
 */
declare const dynamicSVGImport: ({ url, name, fileExtension, cacheStrategy, cacheName, renewSignal, }: Args) => Promise<string>;
export { dynamicSVGImport };
