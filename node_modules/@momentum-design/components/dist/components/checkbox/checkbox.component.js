var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { DataAriaLabelMixin } from '../../utils/mixins/DataAriaLabelMixin';
import { NameMixin } from '../../utils/mixins/NameMixin';
import { ValueMixin } from '../../utils/mixins/ValueMixin';
import FormfieldWrapper from '../formfieldwrapper/formfieldwrapper.component';
import { DEFAULTS as FORMFIELD_DEFAULTS } from '../formfieldwrapper/formfieldwrapper.constants';
import { ICON_NAME } from './checkbox.constants';
import styles from './checkbox.styles';
/**
 * Checkboxes allow users to select multiple options from a list or turn an item/feature on or off.
 * These are often used in forms, settings, and selections in lists.
 *
 * A checkbox component contains an optional label and an optional helper text.
 *
 * To create a group of checkboxes, use the FormFieldGroup component.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-checkbox
 *
 * @cssproperty --mdc-checkbox-background-color-hover - Allows customization of the background color on hover.
 * @cssproperty --mdc-checkbox-border-color - Border color in high contrast.
 * @cssproperty --mdc-checkbox-checked-background-color - Background color for a selected checkbox.
 * @cssproperty --mdc-checkbox-checked-background-color-hover - Background color for a selected checkbox when hovered.
 * @cssproperty --mdc-checkbox-checked-pressed-icon-color - Background color for a selected checkbox when pressed.
 * @cssproperty --mdc-checkbox-disabled-background-color - Background color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-disabled-border-color - Border color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-disabled-checked-icon-color - Background color for a disabled, selected checkbox.
 * @cssproperty --mdc-checkbox-disabled-icon-color - Icon color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-icon-background-color - Background color for an unselected checkbox.
 * @cssproperty --mdc-checkbox-icon-border-color - Default background color for an unselected checkbox.
 * @cssproperty --mdc-checkbox-icon-color - Icon color for an unselected checkbox.
 * @cssproperty --mdc-checkbox-pressed-icon-color - Background color for a selected checkbox when pressed.
 */
class Checkbox extends NameMixin(ValueMixin(DataAriaLabelMixin(FormfieldWrapper))) {
    /** @internal */
    get form() {
        return this.internals.form;
    }
    constructor() {
        super();
        /**
         * Determines whether the checkbox is selected or unselected.
         *
         * @default false
         */
        this.checked = false;
        /**
         * This property is used to determine the parent checkbox in a nested checkbox group.
         * If any one of the children is unselected, then the parent checkbox will be indeterminate.
         * If all children are either selected or unselected, then the parent checkbox will not be indeterminate.
         *
         * @default false
         */
        this.indeterminate = false;
        this.internals = this.attachInternals();
        // Checkbox does not contain helpTextType property.
        this.helpTextType = undefined;
    }
    /**
     * Updates the form value to reflect the current state of the checkbox.
     * If checked, the value is set to either the user-provided value or 'on' if no value is provided.
     * If unchecked, the value is set to null.
     */
    setFormValue() {
        let actualValue = null;
        if (this.checked) {
            actualValue = !this.value ? 'on' : this.value;
        }
        this.internals.setFormValue(actualValue);
    }
    /**
     * Toggles the state of the checkbox element.
     * If the element is not disabled, then
     * the checked property is toggled and the indeterminate property is set to false.
     */
    toggleState() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.indeterminate = false;
        }
    }
    /**
     * Toggles the state of the checkbox element.
     * and dispatch the new change event.
     */
    handleChange(event) {
        this.toggleState();
        const EventConstructor = event.constructor;
        this.dispatchEvent(new EventConstructor(event.type, event));
    }
    /**
     * Handles the keydown event on the checkbox.
     * When the user presses Enter, the form is submitted.
     * @param event - The keyboard event.
     */
    handleKeyDown(event) {
        var _a;
        if (event.key === 'Enter') {
            (_a = this.form) === null || _a === void 0 ? void 0 : _a.requestSubmit();
        }
    }
    update(changedProperties) {
        super.update(changedProperties);
        if (changedProperties.has('checked')) {
            this.setFormValue();
        }
    }
    render() {
        var _a;
        const checkboxIconContent = (this.checked || this.indeterminate) ? html `
      <mdc-icon
        class="icon"
        name="${this.indeterminate ? ICON_NAME.INDETERMINATE : ICON_NAME.CHECKED}"
        size="1"
        length-unit="rem"
      ></mdc-icon>
    ` : nothing;
        const helpTextContent = this.helpText ? this.renderHelperText() : nothing;
        return html `
      <div class="container mdc-focus-ring">
        <input
          id="${this.id}"
          type="checkbox"
          class="input"
          name="${ifDefined(this.name)}"
          value="${ifDefined(this.value)}"
          .checked="${this.checked}"
          .indeterminate="${this.indeterminate}"
          .disabled="${this.disabled}"
          aria-label="${(_a = this.dataAriaLabel) !== null && _a !== void 0 ? _a : ''}"
          aria-describedby="${FORMFIELD_DEFAULTS.HELPER_TEXT_ID}"
          @change=${this.handleChange}
          @keydown=${this.handleKeyDown}
        />
        <div class="icon-container">${checkboxIconContent}</div>
      </div>
      <div class="text-container">
        ${this.renderLabel()}
        ${helpTextContent}
      </div>
    `;
    }
}
/** @internal */
Checkbox.formAssociated = true;
Checkbox.styles = [...FormfieldWrapper.styles, ...styles];
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], Checkbox.prototype, "checked", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], Checkbox.prototype, "indeterminate", void 0);
export default Checkbox;
