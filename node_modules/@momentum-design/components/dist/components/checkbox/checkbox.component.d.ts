import { CSSResult, PropertyValues } from 'lit';
import FormfieldWrapper from '../formfieldwrapper/formfieldwrapper.component';
declare const Checkbox_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/NameMixin").NameMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/ValueMixin").ValueMixinInterface> & import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DataAriaLabelMixin").DataAriaLabelMixinInterface> & typeof FormfieldWrapper;
/**
 * Checkboxes allow users to select multiple options from a list or turn an item/feature on or off.
 * These are often used in forms, settings, and selections in lists.
 *
 * A checkbox component contains an optional label and an optional helper text.
 *
 * To create a group of checkboxes, use the FormFieldGroup component.
 *
 * @dependency mdc-icon
 *
 * @tagname mdc-checkbox
 *
 * @cssproperty --mdc-checkbox-background-color-hover - Allows customization of the background color on hover.
 * @cssproperty --mdc-checkbox-border-color - Border color in high contrast.
 * @cssproperty --mdc-checkbox-checked-background-color - Background color for a selected checkbox.
 * @cssproperty --mdc-checkbox-checked-background-color-hover - Background color for a selected checkbox when hovered.
 * @cssproperty --mdc-checkbox-checked-pressed-icon-color - Background color for a selected checkbox when pressed.
 * @cssproperty --mdc-checkbox-disabled-background-color - Background color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-disabled-border-color - Border color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-disabled-checked-icon-color - Background color for a disabled, selected checkbox.
 * @cssproperty --mdc-checkbox-disabled-icon-color - Icon color for a disabled checkbox.
 * @cssproperty --mdc-checkbox-icon-background-color - Background color for an unselected checkbox.
 * @cssproperty --mdc-checkbox-icon-border-color - Default background color for an unselected checkbox.
 * @cssproperty --mdc-checkbox-icon-color - Icon color for an unselected checkbox.
 * @cssproperty --mdc-checkbox-pressed-icon-color - Background color for a selected checkbox when pressed.
 */
declare class Checkbox extends Checkbox_base {
    /**
     * Determines whether the checkbox is selected or unselected.
     *
     * @default false
     */
    checked: boolean;
    /**
     * This property is used to determine the parent checkbox in a nested checkbox group.
     * If any one of the children is unselected, then the parent checkbox will be indeterminate.
     * If all children are either selected or unselected, then the parent checkbox will not be indeterminate.
     *
     * @default false
     */
    indeterminate: boolean;
    /** @internal */
    private internals;
    /** @internal */
    static formAssociated: boolean;
    /** @internal */
    get form(): HTMLFormElement | null;
    constructor();
    /**
     * Updates the form value to reflect the current state of the checkbox.
     * If checked, the value is set to either the user-provided value or 'on' if no value is provided.
     * If unchecked, the value is set to null.
     */
    private setFormValue;
    /**
     * Toggles the state of the checkbox element.
     * If the element is not disabled, then
     * the checked property is toggled and the indeterminate property is set to false.
     */
    private toggleState;
    /**
     * Toggles the state of the checkbox element.
     * and dispatch the new change event.
     */
    handleChange(event: Event): void;
    /**
     * Handles the keydown event on the checkbox.
     * When the user presses Enter, the form is submitted.
     * @param event - The keyboard event.
     */
    private handleKeyDown;
    update(changedProperties: PropertyValues): void;
    render(): import("lit-html").TemplateResult<1>;
    static styles: Array<CSSResult>;
}
export default Checkbox;
