var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { v4 as uuidv4 } from 'uuid';
import { Component } from '../../models';
import { DisabledMixin } from '../../utils/mixins/DisabledMixin';
import { DEFAULTS, MDC_TEXT_OPTIONS } from './formfieldwrapper.constants';
import styles from './formfieldwrapper.styles';
import { getHelperIcon } from './formfieldwrapper.utils';
/**
 * formfieldwrapper is a component that contains the label and helper/validation text
 *  that can be configured in various ways to suit different use cases (most of the input related components).
 * It is used as an internal component and is not intended to be used directly by consumers.
 *
 * @tagname mdc-formfieldwrapper
 *
 * @slot label-info - slot to add the label info icon
 *
 */
class FormfieldWrapper extends DisabledMixin(Component) {
    constructor() {
        super(...arguments);
        /**
         * The unique id of the input field. It is used to link the input field with the label.
         * @default `mdc-input-${uuidv4()}`
         */
        this.id = `mdc-input-${uuidv4()}`;
        /**
         * The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.
         */
        this.helpTextType = DEFAULTS.VALIDATION;
    }
    /**
     * creates the label element when the label property is set.
     * id is used to link the label with the input field.
     * @returns void
     */
    renderLabelElement() {
        if (!this.label) {
            return nothing;
        }
        return html `<label id="${DEFAULTS.LABEL_ID}" for="${this.id}" class="mdc-label" part="label">${this.label}</label>`;
    }
    renderRequiredLabel() {
        if (!this.requiredLabel) {
            return nothing;
        }
        return html `
      <mdc-text
        part="required-label"
        tagname=${MDC_TEXT_OPTIONS.TAGNAME}
        type=${MDC_TEXT_OPTIONS.TYPE}
      >
        (${this.requiredLabel})
      </mdc-text>
    `;
    }
    /**
     * creates the helpertext icon based on the helpTextType for validation.
     * If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.
     * @returns void
     */
    renderHelpTextIcon() {
        if (!this.helpText) {
            return nothing;
        }
        const helperIcon = getHelperIcon(this.helpTextType || DEFAULTS.VALIDATION);
        if (helperIcon && !this.disabled) {
            return html `<mdc-icon part="helper-icon" size="1" length-unit="rem" name=${helperIcon}></mdc-icon>`;
        }
        return nothing;
    }
    /**
     * creates the helper text component when the helpertext value is set.
     * It is also used to display the validation message based on the helpTextType.
     * @returns void
     */
    renderHelpText() {
        if (!this.helpText) {
            return nothing;
        }
        return html `
      <mdc-text
        id="${DEFAULTS.HELPER_TEXT_ID}"
        part="help-text"
        tagname=${MDC_TEXT_OPTIONS.TAGNAME}
        type=${MDC_TEXT_OPTIONS.TYPE}
      >
        ${this.helpText}
      </mdc-text>
    `;
    }
    /**
     * renders the mdc-label-text container that contains the label and labelInfoToggleTip.
     * @returns void
     */
    renderLabel() {
        return html `<div class="mdc-label-text" part="label-text">
      <slot name="label">${this.renderLabelElement()}</slot>
      <slot name="required-label">${this.renderRequiredLabel()}</slot>
      <slot name="label-info"></slot>
    </div>`;
    }
    /**
     * renders the mdc-help-text container that contains the helpertext icon and helpertext.
     * @returns void
     */
    renderHelperText() {
        if (!this.helpText) {
            return nothing;
        }
        return html `<div class="mdc-help-text" part="mdc-help-text">
      <slot name="help-icon">${this.renderHelpTextIcon()}</slot>
      <slot name="help-text">${this.renderHelpText()}</slot>
    </div>`;
    }
}
FormfieldWrapper.styles = [...Component.styles, ...styles];
__decorate([
    property({ reflect: true, type: String }),
    __metadata("design:type", String)
], FormfieldWrapper.prototype, "label", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'required-label' }),
    __metadata("design:type", String)
], FormfieldWrapper.prototype, "requiredLabel", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], FormfieldWrapper.prototype, "id", void 0);
__decorate([
    property({ reflect: true, attribute: 'help-text-type' }),
    __metadata("design:type", String)
], FormfieldWrapper.prototype, "helpTextType", void 0);
__decorate([
    property({ type: String, reflect: true, attribute: 'help-text' }),
    __metadata("design:type", String)
], FormfieldWrapper.prototype, "helpText", void 0);
export default FormfieldWrapper;
