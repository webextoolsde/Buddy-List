import { CSSResult, nothing } from 'lit';
import { Component } from '../../models';
import type { ValidationType } from './formfieldwrapper.types';
declare const FormfieldWrapper_base: import("../../utils/mixins/index.types").Constructor<import("../../utils/mixins/DisabledMixin").DisabledMixinInterface> & typeof Component;
/**
 * formfieldwrapper is a component that contains the label and helper/validation text
 *  that can be configured in various ways to suit different use cases (most of the input related components).
 * It is used as an internal component and is not intended to be used directly by consumers.
 *
 * @tagname mdc-formfieldwrapper
 *
 * @slot label-info - slot to add the label info icon
 *
 */
declare class FormfieldWrapper extends FormfieldWrapper_base {
    /**
     * The label of the input field. It is linked to the input field using the `for` attribute.
     */
    label?: string;
    /**
     * The required label of the input field.
     * When an appropriate string value is set,
     * the input field is marked as required and the label is appended with this text.
     */
    requiredLabel?: string;
    /**
     * The unique id of the input field. It is used to link the input field with the label.
     * @default `mdc-input-${uuidv4()}`
     */
    id: string;
    /**
     * The type of help text. It can be 'default', 'error', 'warning', 'success', 'priority'.
     */
    helpTextType: ValidationType;
    /**
     * The help text that is displayed below the input field.
     */
    helpText?: string;
    /**
     * creates the label element when the label property is set.
     * id is used to link the label with the input field.
     * @returns void
     */
    protected renderLabelElement(): import("lit-html").TemplateResult<1> | typeof nothing;
    protected renderRequiredLabel(): import("lit-html").TemplateResult<1> | typeof nothing;
    /**
     * creates the helpertext icon based on the helpTextType for validation.
     * If the helpTextType is not set, it defaults to 'default' and it doesn't display any icon.
     * @returns void
     */
    protected renderHelpTextIcon(): import("lit-html").TemplateResult<1> | typeof nothing;
    /**
     * creates the helper text component when the helpertext value is set.
     * It is also used to display the validation message based on the helpTextType.
     * @returns void
     */
    protected renderHelpText(): import("lit-html").TemplateResult<1> | typeof nothing;
    /**
     * renders the mdc-label-text container that contains the label and labelInfoToggleTip.
     * @returns void
     */
    protected renderLabel(): import("lit-html").TemplateResult<1>;
    /**
     * renders the mdc-help-text container that contains the helpertext icon and helpertext.
     * @returns void
     */
    protected renderHelperText(): import("lit-html").TemplateResult<1> | typeof nothing;
    static styles: Array<CSSResult>;
}
export default FormfieldWrapper;
