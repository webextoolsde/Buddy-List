export type CacheStrategy = 'in-memory-cache' | 'web-cache-api';
/**
 * Cache, using In-Memory Cache (Map)
 * @param name - name of the cache (used as an identifier)
 * @returns Object with set, get and delete methods
 */
export declare const inMemoryCache: (name: string) => Promise<{
    set(request: Request, response: Response): Promise<void>;
    get(request: Request): Promise<string | undefined>;
    delete(request: Request): Promise<void>;
}>;
/**
 * Cache, using Web API Cache
 * @param name - name of the cache (used as an identifier)
 * @returns Object with set, get and delete methods
 */
export declare const webAPIIconsCache: (name: string) => Promise<{
    set: (request: Request, response: Response) => Promise<void>;
    get: (request: Request) => Promise<string | undefined>;
    delete: (request: Request) => Promise<void>;
}>;
/**
 * Function to return the cache based on the cache strategy
 * @param cacheName - name of the cache to be used
 * @param cacheStrategy - strategy to be used for caching
 * @returns the cache based on the strategy
 */
export declare const iconsCache: (cacheName: string, cacheStrategy: CacheStrategy) => Promise<{
    set(request: Request, response: Response): Promise<void>;
    get(request: Request): Promise<string | undefined>;
    delete(request: Request): Promise<void>;
}>;
