var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { property } from 'lit/decorators.js';
export const ValueMixin = (superClass) => {
    class InnerMixinClass extends superClass {
        constructor() {
            super(...arguments);
            /**
             * Indicates the value of the component group (ex: input, checkbox, radio, select etc...)
             * @default ''
             */
            this.value = '';
        }
    }
    __decorate([
        property({ reflect: true, type: String }),
        __metadata("design:type", Object)
    ], InnerMixinClass.prototype, "value", void 0);
    // Cast return type to your mixin's interface intersected with the superClass type
    return InnerMixinClass;
};
