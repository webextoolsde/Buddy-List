var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { property } from 'lit/decorators.js';
import { DEFAULTS as AVATAR_DEFAULTS } from '../../components/avatar/avatar.constants';
export const AvatarComponentMixin = (superClass) => {
    class InnerMixinClass extends superClass {
        constructor() {
            super(...arguments);
            /**
             * Acceptable values include (size in px unit):
             * - 24
             * - 32
             * - 48
             * - 64
             * - 72
             * - 88
             * - 124
             *
             * @default 32
             */
            this.size = AVATAR_DEFAULTS.SIZE;
            /**
             * Represents the typing indicator when the user is typing.
             * @default false
             */
            this.isTyping = false;
        }
    }
    __decorate([
        property({ type: String }),
        __metadata("design:type", String)
    ], InnerMixinClass.prototype, "src", void 0);
    __decorate([
        property({ type: String }),
        __metadata("design:type", String)
    ], InnerMixinClass.prototype, "initials", void 0);
    __decorate([
        property({ type: String }),
        __metadata("design:type", String)
    ], InnerMixinClass.prototype, "presence", void 0);
    __decorate([
        property({ type: Number, reflect: true, attribute: 'size' }),
        __metadata("design:type", Number)
    ], InnerMixinClass.prototype, "size", void 0);
    __decorate([
        property({ type: Number }),
        __metadata("design:type", Number)
    ], InnerMixinClass.prototype, "counter", void 0);
    __decorate([
        property({ type: Boolean, attribute: 'is-typing' }),
        __metadata("design:type", Object)
    ], InnerMixinClass.prototype, "isTyping", void 0);
    // Cast return type to your mixin's interface intersected with the superClass type
    return InnerMixinClass;
};
